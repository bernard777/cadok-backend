// Script de nettoyage de la base de donn√©es CADOK
// √Ä ex√©cuter depuis le dossier cadok-backend avec : node cleanup-database.js

const mongoose = require('mongoose');

// Configuration MongoDB (ajustez selon votre configuration)
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/cadok';

// Mod√®les (vous devrez ajuster les chemins selon votre structure)
const User = require('./models/User');
const Trade = require('./models/Trade');
const Object = require('./models/Object');
const Event = require('./models/Event');
const Review = require('./models/Review');

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('üì¶ Connexion MongoDB √©tablie');
  } catch (error) {
    console.error('‚ùå Erreur connexion MongoDB:', error);
    process.exit(1);
  }
}

async function cleanupTrades() {
  console.log('\nüîÑ Nettoyage des trades orphelins...');
  
  try {
    // Supprimer les trades avec fromUser ou toUser null
    const result = await Trade.deleteMany({
      $or: [
        { fromUser: null },
        { toUser: null }
      ]
    });
    
    console.log(`‚úÖ ${result.deletedCount} trades orphelins supprim√©s`);
    
    // Optionnel : supprimer les trades r√©f√©ren√ßant des utilisateurs inexistants
    const allTrades = await Trade.find({}).populate('fromUser toUser', '_id');
    let invalidTrades = 0;
    
    for (const trade of allTrades) {
      if (!trade.fromUser || !trade.toUser) {
        await Trade.findByIdAndDelete(trade._id);
        invalidTrades++;
      }
    }
    
    if (invalidTrades > 0) {
      console.log(`‚úÖ ${invalidTrades} trades avec utilisateurs inexistants supprim√©s`);
    }
    
    return result.deletedCount + invalidTrades;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage trades:', error);
    return 0;
  }
}

async function cleanupObjects() {
  console.log('\nüîÑ Nettoyage des objets orphelins...');
  
  try {
    // Supprimer les objets avec owner null
    const result = await Object.deleteMany({
      owner: null
    });
    
    console.log(`‚úÖ ${result.deletedCount} objets orphelins supprim√©s`);
    
    // Optionnel : supprimer les objets r√©f√©ren√ßant des propri√©taires inexistants
    const allObjects = await Object.find({}).populate('owner', '_id');
    let invalidObjects = 0;
    
    for (const obj of allObjects) {
      if (!obj.owner) {
        await Object.findByIdAndDelete(obj._id);
        invalidObjects++;
      }
    }
    
    if (invalidObjects > 0) {
      console.log(`‚úÖ ${invalidObjects} objets avec propri√©taires inexistants supprim√©s`);
    }
    
    return result.deletedCount + invalidObjects;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage objets:', error);
    return 0;
  }
}

async function cleanupReviews() {
  console.log('\nüîÑ Nettoyage des avis orphelins...');
  
  try {
    // Supprimer les avis avec fromUser, toUser ou trade null
    const result = await Review.deleteMany({
      $or: [
        { fromUser: null },
        { toUser: null },
        { trade: null }
      ]
    });
    
    console.log(`‚úÖ ${result.deletedCount} avis orphelins supprim√©s`);
    return result.deletedCount;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage avis:', error);
    return 0;
  }
}

async function cleanupEvents() {
  console.log('\nüîÑ Nettoyage des √©v√©nements orphelins...');
  
  try {
    // Supprimer les √©v√©nements avec organizer null
    const result = await Event.deleteMany({
      organizer: null
    });
    
    console.log(`‚úÖ ${result.deletedCount} √©v√©nements orphelins supprim√©s`);
    return result.deletedCount;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage √©v√©nements:', error);
    return 0;
  }
}

async function generateReport() {
  console.log('\nüìä G√©n√©ration du rapport de nettoyage...');
  
  try {
    const stats = {
      users: await User.countDocuments(),
      trades: await Trade.countDocuments(),
      objects: await Object.countDocuments(),
      events: await Event.countDocuments(),
      reviews: await Review.countDocuments()
    };
    
    console.log('\nüìà STATISTIQUES FINALES:');
    console.log(`üë• Utilisateurs: ${stats.users}`);
    console.log(`üîÑ √âchanges: ${stats.trades}`);
    console.log(`üì¶ Objets: ${stats.objects}`);
    console.log(`üìÖ √âv√©nements: ${stats.events}`);
    console.log(`‚≠ê Avis: ${stats.reviews}`);
    
    return stats;
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration rapport:', error);
    return null;
  }
}

async function main() {
  console.log('üßπ D√âMARRAGE DU NETTOYAGE DE LA BASE DE DONN√âES CADOK');
  console.log('======================================================');
  
  await connectDB();
  
  let totalCleaned = 0;
  
  // Nettoyage des diff√©rentes collections
  totalCleaned += await cleanupTrades();
  totalCleaned += await cleanupObjects();
  totalCleaned += await cleanupReviews();
  totalCleaned += await cleanupEvents();
  
  // Rapport final
  await generateReport();
  
  console.log('\nüéØ R√âSULTATS DU NETTOYAGE:');
  console.log(`‚úÖ Total d'√©l√©ments supprim√©s: ${totalCleaned}`);
  
  if (totalCleaned === 0) {
    console.log('üéâ Aucun √©l√©ment orphelin trouv√© - Base de donn√©es propre !');
  } else {
    console.log('üéâ Nettoyage termin√© avec succ√®s !');
  }
  
  await mongoose.connection.close();
  console.log('üì¶ Connexion MongoDB ferm√©e');
}

// Ex√©cution du script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { main, cleanupTrades, cleanupObjects, cleanupReviews, cleanupEvents };
