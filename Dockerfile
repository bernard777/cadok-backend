# üê≥ Dockerfile CADOK Backend
# Compatible avec tous les h√©bergeurs Docker

# ===== STAGE 1: Dependencies =====
FROM node:18-alpine AS dependencies
WORKDIR /app

# Copie des fichiers de d√©pendances
COPY package*.json ./

# Installation des d√©pendances de production uniquement
RUN npm ci --only=production && npm cache clean --force

# ===== STAGE 2: Build & Test =====
FROM node:18-alpine AS builder
WORKDIR /app

# Copie des fichiers de d√©pendances
COPY package*.json ./

# Installation de TOUTES les d√©pendances (dev incluses pour les tests)
RUN npm ci

# Copie du code source
COPY . .

# Ex√©cution des tests avec vos seuils √©lev√©s (95% pour securityService)
RUN npm test

# ===== STAGE 3: Production =====
FROM node:18-alpine AS production

# Cr√©ation d'un utilisateur non-root pour la s√©curit√©
RUN addgroup -g 1001 -S cadok && \
    adduser -S cadok -u 1001

# Installation des outils syst√®me n√©cessaires
RUN apk add --no-cache \
    curl \
    tzdata

# Configuration du timezone (adaptez selon votre localisation)
ENV TZ=Europe/Paris

WORKDIR /app

# Copie des d√©pendances de production depuis le stage dependencies
COPY --from=dependencies /app/node_modules ./node_modules

# Copie du code source (test√© et valid√©)
COPY --chown=cadok:cadok . .

# Cr√©ation du dossier uploads avec les bonnes permissions
RUN mkdir -p uploads && chown -R cadok:cadok uploads

# Changement vers l'utilisateur non-root
USER cadok

# Exposition du port (configurable via env)
EXPOSE ${PORT:-5000}

# Health check pour v√©rifier que l'API r√©pond
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${PORT:-5000}/api/auth/test-connection || exit 1

# Variables d'environnement par d√©faut
ENV NODE_ENV=production
ENV PORT=5000

# Commande de d√©marrage
CMD ["npm", "start"]

# ===== M√âTADONN√âES =====
LABEL maintainer="CADOK Team"
LABEL version="1.0.0"
LABEL description="CADOK Backend API - Plateforme de troc s√©curis√©e"
