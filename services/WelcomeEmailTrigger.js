/**
 * Service pour g√©rer l'envoi de l'email de bienvenue
 * Envoy√© uniquement apr√®s v√©rification compl√®te (email + t√©l√©phone)
 */

const User = require('../models/User');
const EmailVerificationService = require('./EmailVerificationService');

class WelcomeEmailTrigger {
  constructor() {
    this.emailService = new EmailVerificationService();
  }

  /**
   * V√©rifie si l'utilisateur a compl√©t√© toutes les v√©rifications
   * et envoie l'email de bienvenue si c'est le cas
   */
  async checkAndSendWelcomeEmail(userId) {
    try {
      console.log(`üîç [WELCOME] V√©rification statut complet pour utilisateur: ${userId}`);

      const user = await User.findById(userId).select('pseudo email emailVerified phoneVerified welcomeEmailSent');
      
      if (!user) {
        console.error('‚ùå [WELCOME] Utilisateur non trouv√©:', userId);
        return { success: false, error: 'Utilisateur non trouv√©' };
      }

      // V√©rifier que les deux v√©rifications sont compl√®tes
      const isFullyVerified = user.emailVerified && user.phoneVerified;
      const welcomeAlreadySent = user.welcomeEmailSent;

      console.log(`üìä [WELCOME] Statut utilisateur ${user.pseudo}:`);
      console.log(`   ‚Ä¢ Email v√©rifi√©: ${user.emailVerified ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚Ä¢ T√©l√©phone v√©rifi√©: ${user.phoneVerified ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚Ä¢ Email bienvenue envoy√©: ${welcomeAlreadySent ? '‚úÖ' : '‚ùå'}`);

      if (!isFullyVerified) {
        console.log('‚ÑπÔ∏è [WELCOME] V√©rification incompl√®te - email de bienvenue en attente');
        return { 
          success: false, 
          reason: 'verification_incomplete',
          message: 'V√©rification email ou t√©l√©phone non termin√©e'
        };
      }

      if (welcomeAlreadySent) {
        console.log('‚ÑπÔ∏è [WELCOME] Email de bienvenue d√©j√† envoy√©');
        return { 
          success: false, 
          reason: 'already_sent',
          message: 'Email de bienvenue d√©j√† envoy√©'
        };
      }

      // üéâ TOUTES LES CONDITIONS SONT REMPLIES - ENVOI EMAIL DE BIENVENUE
      console.log('üéâ [WELCOME] Conditions remplies - envoi email de bienvenue...');

      const welcomeResult = await this.emailService.sendWelcomeEmail(user);

      if (welcomeResult.success) {
        // Marquer l'email de bienvenue comme envoy√©
        await User.findByIdAndUpdate(userId, {
          welcomeEmailSent: true,
          welcomeEmailSentAt: new Date()
        });

        console.log(`‚úÖ [WELCOME] Email de bienvenue envoy√© avec succ√®s √†: ${user.email}`);
        console.log(`üìß [WELCOME] Service: ${welcomeResult.service}`);

        return {
          success: true,
          messageId: welcomeResult.messageId,
          service: welcomeResult.service,
          user: {
            email: user.email,
            pseudo: user.pseudo
          }
        };
      } else {
        console.error(`‚ùå [WELCOME] √âchec envoi email de bienvenue:`, welcomeResult.error);
        return {
          success: false,
          error: welcomeResult.error,
          reason: 'email_send_failed'
        };
      }

    } catch (error) {
      console.error('‚ùå [WELCOME] Erreur critique dans checkAndSendWelcomeEmail:', error);
      return {
        success: false,
        error: error.message,
        reason: 'system_error'
      };
    }
  }

  /**
   * M√©thode helper pour les routes - v√©rifie et envoie email de bienvenue
   * Utilis√© apr√®s v√©rification email ou t√©l√©phone
   */
  async tryTriggerWelcomeEmail(userId) {
    const result = await this.checkAndSendWelcomeEmail(userId);
    
    if (result.success) {
      console.log('üåü [WELCOME] D√©clenchement r√©ussi - utilisateur compl√®tement v√©rifi√© !');
    } else if (result.reason === 'verification_incomplete') {
      console.log('‚è≥ [WELCOME] En attente de v√©rification compl√®te...');
    } else if (result.reason === 'already_sent') {
      console.log('‚úì [WELCOME] Email d√©j√† envoy√© pr√©c√©demment');
    } else {
      console.log('‚ö†Ô∏è [WELCOME] √âchec d√©clenchement:', result.error);
    }

    return result;
  }
}

module.exports = WelcomeEmailTrigger;
