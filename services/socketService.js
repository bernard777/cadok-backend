const { Server } = require('socket.io');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

class SocketService {
  constructor() {
    this.io = null;
    this.userSockets = new Map(); // userId -> socketId
    this.socketUsers = new Map(); // socketId -> userId
  }

  initialize(server) {
    this.io = new Server(server, {
      cors: {
        origin: ["http://localhost:19006", "http://192.168.1.16:19006", "exp://192.168.1.16:19000"],
        methods: ["GET", "POST"],
        credentials: true
      },
      transports: ['websocket', 'polling']
    });

    this.io.use(async (socket, next) => {
      try {
        const token = socket.handshake.auth.token;
        if (!token) {
          return next(new Error('Token manquant'));
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.id);
        
        if (!user) {
          return next(new Error('Utilisateur introuvable'));
        }

        socket.userId = user._id.toString();
        socket.userPseudo = user.pseudo;
        next();
      } catch (error) {
        console.error('‚ùå [SOCKET] Erreur d\'authentification:', error.message);
        next(new Error('Token invalide'));
      }
    });

    this.io.on('connection', (socket) => {
      this.handleConnection(socket);
    });

    console.log('üîå [SOCKET] Service Socket.io initialis√©');
  }

  handleConnection(socket) {
    const userId = socket.userId;
    const userPseudo = socket.userPseudo;

    // Enregistrer la connexion
    this.userSockets.set(userId, socket.id);
    this.socketUsers.set(socket.id, userId);

    console.log(`üü¢ [SOCKET] ${userPseudo} connect√© (${userId})`);

    // Rejoindre les salles de conversation
    socket.on('join-conversation', (tradeId) => {
      socket.join(`trade_${tradeId}`);
      console.log(`üìù [SOCKET] ${userPseudo} a rejoint la conversation ${tradeId}`);
    });

    // Quitter une conversation
    socket.on('leave-conversation', (tradeId) => {
      socket.leave(`trade_${tradeId}`);
      console.log(`üö™ [SOCKET] ${userPseudo} a quitt√© la conversation ${tradeId}`);
    });

    // G√©rer la d√©connexion
    socket.on('disconnect', () => {
      this.userSockets.delete(userId);
      this.socketUsers.delete(socket.id);
      console.log(`üî¥ [SOCKET] ${userPseudo} d√©connect√©`);
    });

    // √âv√©nement pour marquer les messages comme lus
    socket.on('messages-read', (tradeId) => {
      socket.to(`trade_${tradeId}`).emit('messages-read-by-other', { tradeId, userId });
    });
  }

  // Envoyer un nouveau message √† tous les participants d'une conversation
  emitNewMessage(tradeId, message, senderId) {
    if (!this.io) return;

    console.log(`üí¨ [SOCKET] Diffusion nouveau message pour trade ${tradeId}`);
    
    // Envoyer √† tous les clients dans la salle sauf l'exp√©diteur
    this.io.to(`trade_${tradeId}`).emit('new-message', {
      tradeId,
      message,
      senderId
    });
  }

  // Notifier qu'un utilisateur est en train d'√©crire
  emitTyping(tradeId, userId, pseudo, isTyping) {
    if (!this.io) return;

    this.io.to(`trade_${tradeId}`).emit('user-typing', {
      tradeId,
      userId,
      pseudo,
      isTyping
    });
  }

  // Mettre √† jour le statut d'un √©change
  emitTradeStatusUpdate(tradeId, newStatus, participants) {
    if (!this.io) return;

    console.log(`üîÑ [SOCKET] Mise √† jour statut trade ${tradeId}: ${newStatus}`);
    
    this.io.to(`trade_${tradeId}`).emit('trade-status-updated', {
      tradeId,
      status: newStatus
    });

    // Notifier aussi via les IDs utilisateur directement
    participants.forEach(userId => {
      const socketId = this.userSockets.get(userId.toString());
      if (socketId) {
        this.io.to(socketId).emit('conversation-updated');
      }
    });
  }

  // Envoyer une notification en temps r√©el
  emitNotification(userId, notification) {
    if (!this.io) return;

    console.log(`üîî [SOCKET] Tentative envoi notification √† userId: ${userId}`);
    console.log(`üîî [SOCKET] Utilisateurs connect√©s:`, Array.from(this.userSockets.keys()));

    const socketId = this.userSockets.get(userId.toString());
    if (socketId) {
      this.io.to(socketId).emit('new-notification', notification);
      console.log(`‚úÖ [SOCKET] Notification envoy√©e √† ${userId} (socket: ${socketId})`);
    } else {
      console.log(`‚ùå [SOCKET] Utilisateur ${userId} non connect√© en Socket.io`);
    }
  }

  // Envoyer un √©v√©nement √† plusieurs utilisateurs sp√©cifiques
  emitToUsers(userIds, eventName, data) {
    if (!this.io) return;

    console.log(`üì° [SOCKET] √âmission ${eventName} vers:`, userIds);
    
    userIds.forEach(userId => {
      const socketId = this.userSockets.get(userId.toString());
      if (socketId) {
        this.io.to(socketId).emit(eventName, data);
        console.log(`‚úÖ [SOCKET] ${eventName} envoy√© √† ${userId}`);
      } else {
        console.log(`‚ö†Ô∏è [SOCKET] Utilisateur ${userId} non connect√©`);
      }
    });
  }

  // V√©rifier si un utilisateur est en ligne
  isUserOnline(userId) {
    return this.userSockets.has(userId.toString());
  }

  // Obtenir le nombre d'utilisateurs connect√©s
  getConnectedUsersCount() {
    return this.userSockets.size;
  }

  // Obtenir tous les utilisateurs connect√©s
  getConnectedUsers() {
    return Array.from(this.userSockets.keys());
  }
}

module.exports = new SocketService();
