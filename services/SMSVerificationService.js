/**
 * üì± SERVICE DE V√âRIFICATION SMS - CADOK
 * Gestion des codes SMS de v√©rification (Twilio gratuit)
 */

const twilio = require('twilio');

class SMSVerificationService {
  constructor() {
    // V√©rification du mode d√©veloppement
    this.isDevelopment = process.env.VERIFICATION_DEV_MODE === 'true' || 
                         process.env.NODE_ENV === 'development' ||
                         !process.env.TWILIO_ACCOUNT_SID ||
                         !process.env.TWILIO_ACCOUNT_SID.startsWith('AC');

    if (this.isDevelopment) {
      console.log('üì± [SMS] Mode d√©veloppement activ√© - SMS simul√©s');
      this.client = null;
    } else {
      // Configuration Twilio (gratuit jusqu'√† 15$ de cr√©dit)
      this.client = twilio(
        process.env.TWILIO_ACCOUNT_SID, 
        process.env.TWILIO_AUTH_TOKEN
      );
    }
    
    this.phoneNumber = process.env.TWILIO_PHONE_NUMBER || '+1234567890';
  }

  /**
   * G√©n√©rer un code de v√©rification √† 6 chiffres
   */
  generateVerificationCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * Formater le num√©ro de t√©l√©phone fran√ßais
   */
  formatPhoneNumber(phone) {
    // Nettoyer le num√©ro
    let cleaned = phone.replace(/\D/g, '');
    
    // Si commence par 0, remplacer par +33
    if (cleaned.startsWith('0')) {
      cleaned = '+33' + cleaned.substring(1);
    }
    // Si ne commence pas par +33, l'ajouter
    else if (!cleaned.startsWith('+33')) {
      cleaned = '+33' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * Envoyer code de v√©rification par SMS
   */
  async sendVerificationCode(phone, code) {
    try {
      const formattedPhone = this.formatPhoneNumber(phone);
      
      if (this.isDevelopment) {
        // Mode d√©veloppement : simulation
        console.log(`üì± [SMS DEV] Simulation d'envoi SMS au ${formattedPhone}`);
        console.log(`üì± [SMS DEV] Code de v√©rification : ${code}`);
        console.log(`üì± [SMS DEV] Message : üîê CADOK - Votre code de v√©rification : ${code}`);
        
        return { 
          success: true, 
          messageId: `dev_${Date.now()}`, 
          phone: formattedPhone,
          code: code,
          message: 'SMS simul√© en mode d√©veloppement' 
        };
      }
      
      const message = await this.client.messages.create({
        body: `üîê CADOK - Votre code de v√©rification : ${code}\n\nCe code expire dans 5 minutes.\nNe le communiquez √† personne.`,
        from: this.phoneNumber,
        to: formattedPhone
      });

      console.log(`‚úÖ SMS envoy√© au ${formattedPhone} - SID: ${message.sid}`);
      return { success: true, messageId: message.sid };
      
    } catch (error) {
      console.error('‚ùå Erreur envoi SMS:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * V√©rifier si le code est valide (pour tests en d√©veloppement)
   */
  isValidTestCode(code) {
    // Code de test universel pour le d√©veloppement
    return code === '123456' && this.isDevelopment;
  }

  /**
   * Simuler l'envoi SMS en mode d√©veloppement (sans Twilio)
   */
  async sendMockVerificationCode(phone, code) {
    console.log(`üì± [MODE TEST] SMS simul√© au ${phone}:`);
    console.log(`üîê Code de v√©rification CADOK: ${code}`);
    console.log('üìù Utilisez ce code dans l\'app mobile');
    
    return { success: true, messageId: 'mock_' + Date.now() };
  }

  /**
   * Envoyer SMS (avec fallback en mode test)
   */
  async sendSMS(phone, code) {
    // En d√©veloppement, utiliser le mode mock
    if (this.isDevelopment) {
      return await this.sendMockVerificationCode(phone, code);
    }
    
    // En production, utiliser le vrai service Twilio
    return await this.sendVerificationCode(phone, code);
  }
}

module.exports = SMSVerificationService;
