/**
 * üì± SERVICE DE V√âRIFICATION SMS - CADOK
 * Gestion des codes SMS de v√©rification (Twilio gratuit)
 */

const twilio = require('twilio');
const { parsePhoneNumber, isValidPhoneNumber } = require('libphonenumber-js');

class SMSVerificationService {
  constructor() {
    // V√©rification du mode d√©veloppement
    this.isDevelopment = process.env.VERIFICATION_DEV_MODE === 'true' || 
                         process.env.NODE_ENV === 'development' ||
                         !process.env.TWILIO_ACCOUNT_SID ||
                         !process.env.TWILIO_ACCOUNT_SID.startsWith('AC');

    if (this.isDevelopment) {
      console.log('üì± [SMS] Mode d√©veloppement activ√© - SMS simul√©s');
      this.client = null;
    } else {
      // Configuration Twilio (gratuit jusqu'√† 15$ de cr√©dit)
      this.client = twilio(
        process.env.TWILIO_ACCOUNT_SID, 
        process.env.TWILIO_AUTH_TOKEN
      );
    }
    
    this.phoneNumber = process.env.TWILIO_PHONE_NUMBER || '+1234567890';
  }

  /**
   * Codes de test fixes pour diff√©rents num√©ros
   * Permet de tester avec diff√©rents sc√©narios
   */
  getTestCodes() {
    return {
      // Num√©ros de test sp√©ciaux avec codes fixes
      '+33123456789': '123456',   // France - Code standard
      '+33987654321': '654321',   // France - Code inverse
      '+1234567890': '111111',    // USA - Code r√©p√©titif
      '+447700900123': '222222',  // UK - Code r√©p√©titif
      '+49123456789': '333333',   // Allemagne - Code r√©p√©titif
      
      // Code universel pour tous les autres num√©ros
      'default': '000000'
    };
  }

  /**
   * G√©n√©rer un code de v√©rification
   * En mode test, utilise des codes fixes selon le num√©ro
   */
  generateVerificationCode(phoneNumber = null) {
    if (this.isDevelopment) {
      const testCodes = this.getTestCodes();
      
      // Si num√©ro sp√©cifique avec code fixe
      if (phoneNumber && testCodes[phoneNumber]) {
        console.log(`üì± [SMS DEV] Code fixe pour ${phoneNumber}: ${testCodes[phoneNumber]}`);
        return testCodes[phoneNumber];
      }
      
      // Sinon code par d√©faut
      console.log(`üì± [SMS DEV] Code par d√©faut: ${testCodes.default}`);
      return testCodes.default;
    }
    
    // Mode production : code al√©atoire
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * Formater le num√©ro de t√©l√©phone international
   */
  formatPhoneNumber(phone) {
    try {
      const phoneObj = parsePhoneNumber(phone);
      if (phoneObj && phoneObj.isValid()) {
        return phoneObj.format('E.164');
      }
      
      // Fallback pour num√©ros fran√ßais
      let cleaned = phone.replace(/\D/g, '');
      if (cleaned.startsWith('0')) {
        cleaned = '+33' + cleaned.substring(1);
      } else if (!cleaned.startsWith('+')) {
        cleaned = '+33' + cleaned;
      }
      
      return cleaned;
    } catch (error) {
      console.error('Erreur formatage t√©l√©phone:', error);
      return phone;
    }
  }

  /**
   * Envoyer code de v√©rification par SMS
   * Utilise soit la simulation (dev) soit Twilio (prod)
   */
  async sendSMS(phone, code) {
    try {
      const formattedPhone = this.formatPhoneNumber(phone);
      
      if (this.isDevelopment) {
        // Mode d√©veloppement : simulation compl√®te
        console.log(`üì± [SMS DEV] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        console.log(`üì± [SMS DEV] üì≤ SMS SIMUL√â`);
        console.log(`üì± [SMS DEV] üì± Destinataire: ${formattedPhone}`);
        console.log(`üì± [SMS DEV] üîê Code: ${code}`);
        console.log(`üì± [SMS DEV] üí¨ Message: "CADOK - Votre code: ${code}"`);
        console.log(`üì± [SMS DEV] ‚è∞ Valide 10 minutes`);
        console.log(`üì± [SMS DEV] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
        
        return { 
          success: true, 
          phoneNumber: formattedPhone,
          code: code, // Debug uniquement
          mode: 'development',
          message: 'SMS simul√© envoy√© avec succ√®s'
        };
      } else {
        // Mode production : vrai SMS via Twilio
        return await this.sendRealSMS(formattedPhone, code);
      }
    } catch (error) {
      console.error('‚ùå [SMS] Erreur envoi SMS:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  /**
   * Envoi SMS r√©el via Twilio (production)
   */
  async sendRealSMS(phone, code) {
    try {
      const formattedPhone = this.formatPhoneNumber(phone);
      
      if (this.isDevelopment) {
        // Mode d√©veloppement : simulation
        console.log(`üì± [SMS DEV] Simulation d'envoi SMS au ${formattedPhone}`);
        console.log(`üì± [SMS DEV] Code de v√©rification : ${code}`);
        console.log(`üì± [SMS DEV] Message : üîê CADOK - Votre code de v√©rification : ${code}`);
        
        return { 
          success: true, 
          messageId: `dev_${Date.now()}`, 
          phone: formattedPhone,
          code: code,
          message: 'SMS simul√© en mode d√©veloppement' 
        };
      }
      
      const message = await this.client.messages.create({
        body: `üîê CADOK - Votre code de v√©rification : ${code}\n\nCe code expire dans 5 minutes.\nNe le communiquez √† personne.`,
        from: this.phoneNumber,
        to: formattedPhone
      });

      console.log(`‚úÖ SMS envoy√© au ${formattedPhone} - SID: ${message.sid}`);
      return { success: true, messageId: message.sid };
      
    } catch (error) {
      console.error('‚ùå Erreur envoi SMS:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * V√©rifier si le code est valide (pour tests en d√©veloppement)
   */
  isValidTestCode(code) {
    if (!this.isDevelopment) return false;
    
    // üß™ CODES DE TEST UNIVERSELS (mode d√©veloppement uniquement)
    const testCodes = [
      '123456', // Code de test principal
      '000000', // Code de test alternatif
      '999999', // Code de test admin
      '111111', // Code de test rapide
      '555555'  // Code de test d√©mo
    ];
    
    console.log(`üì± [SMS DEV] V√©rification code test: ${code} -> ${testCodes.includes(code) ? 'VALIDE' : 'INVALIDE'}`);
    return testCodes.includes(code);
  }

  /**
   * Simuler l'envoi SMS en mode d√©veloppement (sans Twilio)
   */
  async sendMockVerificationCode(phone, code) {
    console.log(`üì± [MODE TEST] SMS simul√© au ${phone}:`);
    console.log(`üîê Code de v√©rification CADOK: ${code}`);
    console.log('üìù Utilisez ce code dans l\'app mobile');
    
    return { success: true, messageId: 'mock_' + Date.now() };
  }

  /**
   * Envoyer SMS (avec fallback en mode test)
   */
  async sendSMS(phone, code) {
    // En d√©veloppement, utiliser le mode mock
    if (this.isDevelopment) {
      return await this.sendMockVerificationCode(phone, code);
    }
    
    // En production, utiliser le vrai service Twilio
    return await this.sendVerificationCode(phone, code);
  }
}

module.exports = SMSVerificationService;
