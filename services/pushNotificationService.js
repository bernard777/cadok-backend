const { Expo } = require('expo-server-sdk');
const User = require('../models/User');

class PushNotificationService {
  constructor() {
    this.expo = new Expo();
  }

  // Envoyer une notification push via Expo avec pr√©f√©rences utilisateur
  async sendPushNotification(userToken, title, body, data = {}, userId = null) {
    if (!userToken || !Expo.isExpoPushToken(userToken)) {
      console.warn('‚ö†Ô∏è Token push invalide:', userToken);
      return false;
    }

    try {
      // R√©cup√©rer les pr√©f√©rences utilisateur si userId fourni
      let soundSetting = 'default';
      if (userId) {
        try {
          const user = await User.findById(userId).select('notificationPreferences');
          if (user?.notificationPreferences) {
            // Respecter les pr√©f√©rences sonores de l'utilisateur
            soundSetting = user.notificationPreferences.sound !== false ? 'default' : null;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les pr√©f√©rences utilisateur:', error);
        }
      }

      const message = {
        to: userToken,
        title,
        body,
        data,
        priority: 'high',
        channelId: 'default',
      };

      // Ajouter le son seulement si activ√© dans les pr√©f√©rences
      if (soundSetting) {
        message.sound = soundSetting;
      }

      const chunks = this.expo.chunkPushNotifications([message]);
      const tickets = [];

      for (const chunk of chunks) {
        try {
          const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
          tickets.push(...ticketChunk);
        } catch (error) {
          console.error('‚ùå Erreur envoi push notification chunk:', error);
        }
      }

      console.log('‚úÖ Notification push envoy√©e:', title, `(son: ${soundSetting || 'silencieux'})`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur notification push:', error);
      return false;
    }
  }

  // Envoyer notification de favori avec pr√©f√©rences
  async sendFavoriteNotification(userToken, fromUserName, objectTitle, userId = null) {
    return await this.sendPushNotification(
      userToken,
      '‚ù§Ô∏è Nouvel int√©r√™t',
      `${fromUserName} a ajout√© "${objectTitle}" √† ses favoris`,
      {
        type: 'object_favorite',
        fromUserName,
        objectTitle
      },
      userId
    );
  }

  // Envoyer notification d'√©change avec pr√©f√©rences
  async sendTradeNotification(userToken, fromUserName, action, userId = null) {
    const titles = {
      'request': 'üîÑ Nouvelle proposition',
      'accepted': '‚úÖ √âchange accept√©',
      'declined': '‚ùå √âchange refus√©'
    };

    const bodies = {
      'request': `${fromUserName} vous propose un √©change`,
      'accepted': `${fromUserName} a accept√© votre proposition`,
      'declined': `${fromUserName} a refus√© votre proposition`
    };

    return await this.sendPushNotification(
      userToken,
      titles[action] || 'üîî Notification',
      bodies[action] || `Nouvelle activit√© de ${fromUserName}`,
      {
        type: `trade_${action}`,
        fromUserName
      },
      userId
    );
  }
}

module.exports = new PushNotificationService();
