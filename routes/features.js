/**
 * üöÄ ROUTES FEATURES - Gestion des fonctionnalit√©s utilisateur
 * Gestion des pr√©f√©rences et activation/d√©sactivation des features premium
 */

const express = require('express');
const router = express.Router();
const auth = require('../middlewares/auth');
const User = require('../models/User');

// Configuration des fonctionnalit√©s disponibles
const availableFeatures = [
  {
    id: 'analytics',
    name: 'Analytics Dashboard',
    title: 'Analytics Dashboard',
    description: 'Graphiques d√©taill√©s de votre activit√©',
    category: 'data',
    enabled: false,
    icon: 'analytics',
    color: '#2196F3',
    premium: true,
    usage: 89,
    features: ['Graphiques temps r√©el', 'Analyses pr√©dictives', 'Export de donn√©es'],
    screen: 'Analytics'
  },
  {
    id: 'notifications', 
    name: 'Smart Notifications',
    title: 'Smart Notifications',
    description: 'Alertes intelligentes contextuelles',
    category: 'notifications',
    enabled: false,
    icon: 'notifications',
    color: '#FF9800',
    premium: false,
    usage: 76,
    features: ['Notifications push', 'Alertes personnalis√©es', 'R√©sum√©s hebdo'],
    screen: 'SmartNotifications'
  },
  {
    id: 'eco',
    name: 'Impact √âcologique',
    title: 'Impact √âcologique',
    description: 'Calcul de votre empreinte carbone',
    category: 'ecology',
    enabled: false,
    icon: 'leaf', 
    color: '#4CAF50',
    premium: true,
    usage: 67,
    features: ['Calcul CO‚ÇÇ √©conomis√©', 'Conseils √©co', 'D√©fis environnementaux'],
    screen: 'EcoImpact'
  },
  {
    id: 'gaming',
    name: 'Gamification',
    title: 'Gamification',
    description: 'Syst√®me de points XP et d√©fis',
    category: 'gamification',
    enabled: false,
    icon: 'game-controller',
    color: '#9C27B0', 
    premium: false,
    usage: 82,
    features: ['Syst√®me XP', 'Succ√®s d√©bloquables', 'Classements'],
    screen: 'Gamification'
  }
];

/**
 * üì± GET /api/features/advanced - R√©cup√©rer les fonctionnalit√©s avanc√©es disponibles
 */
router.get('/advanced', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    // R√©cup√©rer les pr√©f√©rences utilisateur
    const userPreferences = user.featurePreferences || {};

    // Mapper les fonctionnalit√©s avec l'√©tat utilisateur
    const featuresWithState = availableFeatures.map(feature => ({
      ...feature,
      enabled: userPreferences[feature.id] || false,
      lastUsed: new Date().toISOString()
    }));

    // Structure de donn√©es compatible avec AdvancedFeaturesScreen
    const responseData = {
      features: featuresWithState,
      stats: {
        totalFeatures: availableFeatures.length,
        activeFeatures: featuresWithState.filter(f => f.enabled).length,
        averageUsage: 78.5
      },
      preferences: userPreferences,
      recommendations: [],
      lastUpdated: new Date().toLocaleString('fr-FR')
    };

    console.log(`üì± Fonctionnalit√©s avanc√©es r√©cup√©r√©es pour l'utilisateur ${user.username}`);

    res.json({
      success: true,
      data: responseData,
      message: 'Fonctionnalit√©s avanc√©es r√©cup√©r√©es avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration fonctionnalit√©s avanc√©es:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des fonctionnalit√©s',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üîÑ PATCH /api/features/:featureId/toggle - Activer/d√©sactiver une fonctionnalit√©
 */
router.patch('/:featureId/toggle', auth, async (req, res) => {
  try {
    const { featureId } = req.params;
    
    // V√©rifier que le featureId est valide  
    const validFeatures = ['analytics', 'notifications', 'eco', 'gaming'];
    if (!validFeatures.includes(featureId)) {
      return res.status(400).json({
        success: false,
        message: `Fonctionnalit√© invalide. Fonctionnalit√©s disponibles: ${validFeatures.join(', ')}`
      });
    }

    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    // Initialiser featurePreferences si n'existe pas
    if (!user.featurePreferences) {
      user.featurePreferences = {
        analytics: true,
        notifications: true,
        eco: true,
        gaming: true
      };
    }

    // Toggle la fonctionnalit√©
    const currentState = user.featurePreferences[featureId];
    const newState = !currentState;
    
    user.featurePreferences[featureId] = newState;
    user.markModified('featurePreferences');
    
    await user.save();

    console.log(`‚úÖ Feature ${featureId} ${newState ? 'activ√©e' : 'd√©sactiv√©e'} pour l'utilisateur ${user.username}`);

    res.json({
      success: true,
      featureId,
      enabled: newState,
      preferences: user.featurePreferences,
      message: `Fonctionnalit√© ${featureId} ${newState ? 'activ√©e' : 'd√©sactiv√©e'} avec succ√®s`
    });

  } catch (error) {
    console.error('‚ùå Erreur toggle feature:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors du changement de fonctionnalit√©',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üìä GET /api/features/preferences - R√©cup√©rer pr√©f√©rences features utilisateur
 */
router.get('/preferences', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    // Pr√©f√©rences par d√©faut si pas encore d√©finies
    const defaultPreferences = {
      analytics: true,
      notifications: true,
      eco: true,
      gaming: true
    };

    const preferences = user.featurePreferences || defaultPreferences;

    res.json({
      success: true,
      preferences,
      message: 'Pr√©f√©rences r√©cup√©r√©es avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration pr√©f√©rences features:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des pr√©f√©rences',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üìù PUT /api/features/preferences - Mettre √† jour toutes les pr√©f√©rences features
 */
router.put('/preferences', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    const { analytics, notifications, eco, gaming } = req.body;

    // Valider les donn√©es
    const validFeatures = { analytics, notifications, eco, gaming };
    for (const [key, value] of Object.entries(validFeatures)) {
      if (value !== undefined && typeof value !== 'boolean') {
        return res.status(400).json({
          success: false,
          message: `La valeur pour ${key} doit √™tre un boolean`
        });
      }
    }

    // Mettre √† jour les pr√©f√©rences
    user.featurePreferences = {
      ...user.featurePreferences,
      ...validFeatures
    };

    user.markModified('featurePreferences');
    await user.save();

    console.log(`‚úÖ Pr√©f√©rences features mises √† jour pour l'utilisateur ${user.username}`);

    res.json({
      success: true,
      preferences: user.featurePreferences,
      message: 'Pr√©f√©rences mises √† jour avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour pr√©f√©rences features:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la mise √† jour des pr√©f√©rences',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üìä GET /api/features/stats - Statistiques d'utilisation des features
 */
router.get('/stats', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    const preferences = user.featurePreferences || {
      analytics: true,
      notifications: true,
      eco: true,
      gaming: true
    };

    // Calculer les statistiques
    const totalFeatures = Object.keys(preferences).length;
    const activeFeatures = Object.values(preferences).filter(Boolean).length;
    const averageUsage = (activeFeatures / totalFeatures) * 100;

    res.json({
      success: true,
      stats: {
        totalFeatures,
        activeFeatures,
        averageUsage: Math.round(averageUsage * 10) / 10
      },
      preferences,
      message: 'Statistiques features r√©cup√©r√©es avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration stats features:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des statistiques',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üîÑ POST /api/features/reset - Remettre √† z√©ro les pr√©f√©rences features
 */
router.post('/reset', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Utilisateur introuvable'
      });
    }

    // Reset aux valeurs par d√©faut
    const defaultPreferences = {
      analytics: true,
      notifications: true,
      eco: true,
      gaming: true
    };

    user.featurePreferences = defaultPreferences;
    user.markModified('featurePreferences');
    await user.save();

    console.log(`‚úÖ Pr√©f√©rences features remises √† z√©ro pour l'utilisateur ${user.username}`);

    res.json({
      success: true,
      preferences: user.featurePreferences,
      message: 'Pr√©f√©rences remises √† z√©ro avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur reset pr√©f√©rences features:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la remise √† z√©ro',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

module.exports = router;
