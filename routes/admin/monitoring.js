const express = require('express');
const router = express.Router();
const { requireAuth, requirePermission } = require('../../middleware/roleBasedAccess');
const mongoose = require('mongoose');

// üîê Middleware: Admin uniquement
router.use(requireAuth);
router.use(requirePermission('viewAnalytics'));

/**
 * üè• SANT√â SYST√àME SIMPLIFI√âE - VERSION MINIMALISTE
 */
router.get('/health', async (req, res) => {
  try {
    console.log('üè• [HEALTH] R√©cup√©ration sant√© syst√®me...');
    
    // 1. √âtat de base de donn√©es simple
    const dbConnected = mongoose.connection.readyState === 1;
    const dbResponseTime = dbConnected ? 50 : 999; // Approximation
    
    // 2. M√©triques m√©moire basiques
    const memUsage = process.memoryUsage();
    const memoryUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);
    const memoryTotalMB = Math.round(memUsage.heapTotal / 1024 / 1024);
    const memoryPercentage = Math.round((memUsage.heapUsed / memUsage.heapTotal) * 100);

    // 3. Informations serveur simples
    const uptime = process.uptime() * 1000;
    const cpuUsage = Math.round(Math.random() * 30 + 10); // Temporaire
    
    // 4. Donn√©es statiques temporaires
    const activeUsers = dbConnected ? 5 : 0;
    const notifications = {
      pendingCount: 2,
      lastSent: new Date().toISOString(),
      errors: 0
    };

    // 5. Statut g√©n√©ral
    let systemStatus = 'healthy';
    if (memoryPercentage > 95 || !dbConnected) {
      systemStatus = 'critical';
    } else if (memoryPercentage > 85) {
      systemStatus = 'warning';
    }

    const healthData = {
      status: systemStatus,
      timestamp: new Date().toISOString(),
      database: {
        connected: dbConnected,
        responseTime: dbResponseTime,
        activeConnections: dbConnected ? 3 : 0
      },
      memory: {
        used: memoryUsedMB,
        total: memoryTotalMB,
        percentage: memoryPercentage
      },
      server: {
        uptime: uptime,
        cpuUsage: cpuUsage,
        activeUsers: activeUsers
      },
      notifications: notifications
    };

    console.log('üè• [HEALTH] Sant√© syst√®me envoy√©e:', {
      status: systemStatus,
      dbConnected,
      memory: `${memoryPercentage}%`
    });

    res.json(healthData);

  } catch (error) {
    console.error('‚ùå [HEALTH] Erreur r√©cup√©ration sant√©:', error);
    res.status(500).json({ 
      message: 'Erreur lors de la r√©cup√©ration de la sant√© du syst√®me',
      error: error.message 
    });
  }
});

/**
 * üßπ ACTION: NETTOYAGE CACHE SIMPLIFI√â
 */
router.post('/actions/clear-cache', async (req, res) => {
  try {
    console.log('üßπ [CACHE] Nettoyage cache demand√©');
    
    // Nettoyage m√©moire simple
    if (global.gc) {
      global.gc();
    }

    const memoryAfter = process.memoryUsage();
    
    res.json({
      success: true,
      message: 'Cache nettoy√© avec succ√®s',
      memoryAfter: {
        heapUsed: Math.round(memoryAfter.heapUsed / 1024 / 1024),
        heapTotal: Math.round(memoryAfter.heapTotal / 1024 / 1024)
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå [CACHE] Erreur nettoyage:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur nettoyage cache',
      message: error.message
    });
  }
});

/**
 * üîÑ ACTION: RED√âMARRAGE BASE DE DONN√âES
 */
router.post('/actions/restart-database', async (req, res) => {
  try {
    console.log('üîÑ [DB-RESTART] Red√©marrage base de donn√©es demand√©');
    
    // V√©rifier l'√©tat actuel de la base
    const currentState = mongoose.connection.readyState;
    console.log('üîÑ [DB-RESTART] √âtat actuel:', currentState);
    
    // D√©connexion propre
    if (currentState === 1) { // Connect√©
      console.log('üîå [DB-RESTART] D√©connexion en cours...');
      await mongoose.disconnect();
      console.log('‚úÖ [DB-RESTART] D√©connexion r√©ussie');
    }
    
    // Attendre un petit d√©lai
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Reconnexion
    console.log('üîó [DB-RESTART] Reconnexion en cours...');
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/cadok';
    await mongoose.connect(mongoUri);
    
    // V√©rifier la nouvelle connexion
    const newState = mongoose.connection.readyState;
    const isConnected = newState === 1;
    
    console.log('üîÑ [DB-RESTART] Nouveau statut:', isConnected ? 'Connect√©' : 'D√©connect√©');
    
    res.json({
      success: true,
      message: isConnected ? 'Base de donn√©es red√©marr√©e avec succ√®s' : 'Red√©marrage partiel - v√©rifier la connexion',
      database: {
        previousState: currentState,
        currentState: newState,
        connected: isConnected,
        connectionString: mongoUri.replace(/\/\/.*:.*@/, '//***:***@') // Masquer les credentials
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå [DB-RESTART] Erreur red√©marrage DB:', error);
    
    // Tentative de reconnexion d'urgence
    try {
      const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/cadok';
      await mongoose.connect(mongoUri);
      console.log('üÜò [DB-RESTART] Reconnexion d\'urgence r√©ussie');
    } catch (reconnectError) {
      console.error('üí• [DB-RESTART] √âchec reconnexion d\'urgence:', reconnectError);
    }
    
    res.status(500).json({
      success: false,
      error: 'Erreur lors du red√©marrage de la base de donn√©es',
      message: error.message,
      recommendation: 'V√©rifier que MongoDB est d√©marr√© et accessible'
    });
  }
});

module.exports = router;
