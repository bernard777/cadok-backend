/**
 * üîå INT√âGRATION API BACKEND - PRIX R√âELS
 * Endpoint pour r√©cup√©rer les prix de march√© avec scraping
 */

const express = require('express');
const PriceService = require('../services/priceService');

const router = express.Router();
const priceService = new PriceService();

/**
 * üí∞ GET /api/prices/market - Prix de march√© pour un objet
 */
router.get('/market', async (req, res) => {
    try {
        const { 
            title, 
            category, 
            subcategory, 
            brand, 
            condition = 'bon', 
            age_years = 1 
        } = req.query;

        // Validation des param√®tres requis
        if (!title || !category) {
            return res.status(400).json({
                error: 'Param√®tres requis: title, category',
                example: '/api/prices/market?title=iPhone%2014&category=√âlectronique&subcategory=Smartphone&brand=Apple'
            });
        }

        // Construire l'objet pour le service
        const objectData = {
            title,
            category,
            subcategory: subcategory || title,
            brand,
            condition,
            age_years: parseInt(age_years) || 1
        };

        console.log(`üîç Demande prix pour: ${title} (${brand || 'Sans marque'})`);

        // R√©cup√©rer le prix via notre syst√®me complet
        const startTime = Date.now();
        const priceResult = await priceService.getMarketPrice(objectData);
        const responseTime = Date.now() - startTime;

        if (priceResult) {
            // Succ√®s - prix trouv√©
            res.json({
                success: true,
                object: {
                    title,
                    category,
                    subcategory,
                    brand
                },
                price: {
                    estimated: priceResult.averagePrice,
                    currency: 'EUR',
                    range: {
                        min: priceResult.priceRange.min,
                        max: priceResult.priceRange.max
                    }
                },
                metadata: {
                    source: priceResult.source,
                    confidence: priceResult.confidence,
                    sampleSize: priceResult.sampleSize,
                    lastUpdated: priceResult.lastUpdated,
                    responseTime: `${responseTime}ms`
                },
                ecological: {
                    recommendation: priceResult.averagePrice > 100 
                        ? "üíö Excellent choix √©cologique ! Pr√©f√©rer l'occasion permet d'√©viter une production neuve."
                        : "üíö Bonne √©conomie circulaire ! Chaque achat d'occasion compte pour la plan√®te."
                }
            });

            console.log(`‚úÖ Prix trouv√©: ${priceResult.averagePrice}‚Ç¨ via ${priceResult.source} (${responseTime}ms)`);
        } else {
            // Aucun prix trouv√©
            res.status(404).json({
                success: false,
                error: 'Aucun prix trouv√© pour cet objet',
                object: objectData,
                suggestions: [
                    'V√©rifiez l\'orthographe du titre',
                    'Essayez une cat√©gorie plus g√©n√©rale',
                    'Ajoutez ou retirez la marque'
                ]
            });

            console.log(`‚ùå Aucun prix trouv√© pour: ${title}`);
        }

    } catch (error) {
        console.error('‚ùå Erreur API prix:', error);
        
        res.status(500).json({
            success: false,
            error: 'Erreur serveur lors de la r√©cup√©ration du prix',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * üìä GET /api/prices/bulk - Prix pour plusieurs objets
 */
router.post('/bulk', async (req, res) => {
    try {
        const { objects } = req.body;

        if (!Array.isArray(objects) || objects.length === 0) {
            return res.status(400).json({
                error: 'Param√®tre requis: objects (array)',
                example: {
                    objects: [
                        { title: 'iPhone 14', category: '√âlectronique', brand: 'Apple' },
                        { title: 'Jean Levi\'s', category: 'V√™tements', brand: 'Levi\'s' }
                    ]
                }
            });
        }

        if (objects.length > 10) {
            return res.status(400).json({
                error: 'Maximum 10 objets par requ√™te bulk'
            });
        }

        console.log(`üîç Demande prix bulk pour ${objects.length} objets`);

        const results = [];
        const startTime = Date.now();

        // Traiter chaque objet (en s√©quentiel pour √©viter la surcharge)
        for (let i = 0; i < objects.length; i++) {
            const obj = objects[i];
            
            try {
                const priceResult = await priceService.getMarketPrice(obj);
                
                results.push({
                    index: i,
                    object: obj,
                    success: true,
                    price: priceResult ? {
                        estimated: priceResult.averagePrice,
                        range: priceResult.priceRange,
                        source: priceResult.source
                    } : null
                });

            } catch (error) {
                results.push({
                    index: i,
                    object: obj,
                    success: false,
                    error: error.message
                });
            }

            // Pause entre objets pour √©viter surcharge
            if (i < objects.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        const totalTime = Date.now() - startTime;
        const successCount = results.filter(r => r.success).length;

        res.json({
            success: true,
            summary: {
                total: objects.length,
                successful: successCount,
                failed: objects.length - successCount,
                averageTime: Math.round(totalTime / objects.length)
            },
            results,
            metadata: {
                totalTime: `${totalTime}ms`,
                processedAt: new Date()
            }
        });

        console.log(`‚úÖ Bulk trait√©: ${successCount}/${objects.length} succ√®s (${totalTime}ms)`);

    } catch (error) {
        console.error('‚ùå Erreur API bulk:', error);
        
        res.status(500).json({
            success: false,
            error: 'Erreur serveur lors du traitement bulk',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * üìà GET /api/prices/stats - Statistiques du syst√®me de prix
 */
router.get('/stats', async (req, res) => {
    try {
        const cacheStats = priceService.getCacheStats();
        
        res.json({
            system: {
                status: 'operational',
                version: '2.0.0',
                features: [
                    'Scraping LeBonCoin (priorit√© 1)',
                    'Service alternatif algorithmique',
                    'Donn√©es gouvernementales fran√ßaises',
                    'APIs externes (eBay, etc.)',
                    'Fallback garanti',
                    'Cache optimis√©',
                    'Monitoring int√©gr√©'
                ]
            },
            cache: cacheStats,
            sources: {
                primary: 'LeBonCoin Scraping',
                secondary: 'Alternative Service',
                tertiary: 'French Gov Data',
                fallback: 'Generic Database'
            },
            performance: {
                expectedResponseTime: '3-8 seconds',
                cacheAcceleration: 'instant',
                availability: '99.9%'
            }
        });

    } catch (error) {
        res.status(500).json({
            error: 'Erreur r√©cup√©ration statistiques'
        });
    }
});

/**
 * üßπ POST /api/prices/cache/clear - Vider le cache
 */
router.post('/cache/clear', async (req, res) => {
    try {
        priceService.clearCache();
        
        res.json({
            success: true,
            message: 'Cache vid√© avec succ√®s',
            clearedAt: new Date()
        });

        console.log('üßπ Cache prix vid√©');

    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Erreur lors du vidage du cache'
        });
    }
});

module.exports = router;
