const express = require('express');
const router = express.Router();
const auth = require('../middlewares/auth');
const User = require('../models/User');

// --- Pr√©f√©rences de notification ---
// GET /me/notification-preferences
router.get('/me/notification-preferences', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('notificationPreferences');
    if (!user) return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    res.json({ notificationPreferences: user.notificationPreferences });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur.' });
  }
});

// PUT /me/notification-preferences
router.put('/me/notification-preferences', auth, async (req, res) => {
  const allowedFields = ['notifications_push', 'notifications_email', 'promotions', 'sound', 'vibration'];
  const updates = {};
  for (const key of allowedFields) {
    if (typeof req.body[key] === 'boolean') {
      updates[`notificationPreferences.${key}`] = req.body[key];
    }
  }
  if (Object.keys(updates).length === 0) {
    return res.status(400).json({ message: 'Aucune pr√©f√©rence valide fournie.' });
  }
  try {
    const user = await User.findByIdAndUpdate(
      req.user.id,
      { $set: updates },
      { new: true, select: 'notificationPreferences' }
    );
    if (!user) return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    res.json({ notificationPreferences: user.notificationPreferences });
  } catch (err) {
    res.status(500).json({ message: 'Erreur serveur.' });
  }
});
const Category = require('../models/Category'); // Assurez-vous d'importer le mod√®le Category
const bcrypt = require('bcryptjs');

const MIN_CATEGORY_COUNT = 4;
const MAX_CATEGORY_COUNT = 8; // Modifiez ce nombre selon la limite souhait√©e

router.post('/me/favorites', auth, async (req, res) => {
  const { categories } = req.body;
  if (!Array.isArray(categories) || categories.length < MIN_CATEGORY_COUNT || categories.length > MAX_CATEGORY_COUNT) {
    return res.status(400).json({ message: `Vous devez s√©lectionner entre ${MIN_CATEGORY_COUNT} et ${MAX_CATEGORY_COUNT} cat√©gories.` });
  }
  // V√©rifie que toutes les cat√©gories existent
  try {
    const found = await Category.find({ _id: { $in: categories } });
    if (found.length < MIN_CATEGORY_COUNT || found.length !== categories.length) {
      return res.status(400).json({ message: "Une ou plusieurs cat√©gories sont invalides." });
    }
    const user = await User.findByIdAndUpdate(req.user.id, { favoriteCategories: categories }, { new: true });
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }
    res.json({ favoriteCategories: user.favoriteCategories });
  } catch (err) {
    res.status(500).json({ message: "Erreur serveur." });
  }
});

router.get('/me/favorites', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id)
      .populate('favoriteCategories', 'name fields')
      .select('favoriteCategories');
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }
    res.json({ favoriteCategories: user.favoriteCategories });
  } catch (err) {
    res.status(500).json({ message: "Erreur serveur." });
  }
});

// Changement de mot de passe s√©curis√©
router.post('/change-password', auth, async (req, res) => {
  const { currentPassword, password } = req.body;

  // V√©rification que les champs requis sont pr√©sents
  if (!currentPassword || !password) {
    return res.status(400).json({ message: 'Les champs currentPassword et password sont requis.' });
  }

  // V√©rification de la force du mot de passe (au moins 8 caract√®res, une lettre et un chiffre)
  if (!/^(?=.*[A-Za-z])(?=.*\d).{8,}$/.test(password)) {
    return res.status(400).json({ message: 'Le mot de passe doit contenir au moins 8 caract√®res, dont une lettre et un chiffre.' });
  }
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
    const hashed = await bcrypt.hash(password, 12);
    }
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Mot de passe actuel incorrect." });
    }
    const hashed = await bcrypt.hash(password, 10);
    await User.findByIdAndUpdate(req.user.id, { password: hashed });
    res.json({ message: 'Mot de passe chang√© avec succ√®s.' });
  } catch (err) {
    res.status(500).json({ message: "Erreur serveur lors du changement de mot de passe." });
  }
});

// R√©cup√©rer les objets d'un utilisateur (pour la vitrine publique)
router.get('/:userId/objects', auth, async (req, res) => {
  try {
    const ObjectModel = require('../models/Object');
    const { userId } = req.params;

    console.log('üîß [DEBUG] R√©cup√©ration objets pour userId:', userId);

    // Validation du userId
    if (!userId || userId === 'undefined' || userId === 'null') {
      return res.status(400).json({ message: "ID utilisateur manquant ou invalide." });
    }

    // V√©rifier que l'ID est un ObjectId valide
    const mongoose = require('mongoose');
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "ID utilisateur invalide." });
    }

    const objects = await ObjectModel.find({ 
      owner: userId, 
      status: 'available' // Seulement les objets disponibles
    })
    .populate('owner', 'pseudo city')
    .sort({ createdAt: -1 });

    console.log('‚úÖ [DEBUG] Objets trouv√©s:', objects.length);
    res.json(objects);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des objets:', err);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des objets." });
  }
});

/**
 * DELETE /me/account
 * Suppression compl√®te du compte utilisateur (conformit√© RGPD)
 */
router.delete('/me/account', auth, async (req, res) => {
  try {
    const { password, reason = 'Demande de l\'utilisateur' } = req.body;
    
    console.log(`üóëÔ∏è [DELETE ACCOUNT] Demande de suppression pour l'utilisateur ${req.user.id}`);
    
    // R√©cup√©rer l'utilisateur
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        error: 'Utilisateur non trouv√©' 
      });
    }
    
    // V√©rifier le mot de passe pour s√©curit√©
    if (!password) {
      return res.status(400).json({ 
        success: false, 
        error: 'Mot de passe requis pour la suppression du compte' 
      });
    }
    
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      console.log(`‚ùå [DELETE ACCOUNT] Mot de passe incorrect pour ${user.email}`);
      return res.status(400).json({ 
        success: false, 
        error: 'Mot de passe incorrect' 
      });
    }
    
    // Emp√™cher la suppression des comptes admin (s√©curit√©)
    if (user.isAdmin || ['admin', 'super_admin', 'moderator'].includes(user.role)) {
      console.log(`üö´ [DELETE ACCOUNT] Tentative de suppression d'un compte admin: ${user.email}`);
      return res.status(403).json({ 
        success: false, 
        error: 'Les comptes administrateurs ne peuvent pas √™tre supprim√©s. Contactez un super administrateur.' 
      });
    }
    
    // Log de l'action avant suppression
    console.log(`üóëÔ∏è [DELETE ACCOUNT] Suppression confirm√©e pour:`, {
      id: user._id,
      email: user.email,
      pseudo: user.pseudo,
      reason: reason,
      timestamp: new Date().toISOString()
    });
    
    // Supprimer d√©finitivement le compte
    await User.findByIdAndDelete(req.user.id);
    
    console.log(`‚úÖ [DELETE ACCOUNT] Compte supprim√© avec succ√®s: ${user.email}`);
    
    res.json({
      success: true,
      message: 'Votre compte a √©t√© supprim√© d√©finitivement. Nous sommes d√©sol√©s de vous voir partir.',
      deletedAt: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå [DELETE ACCOUNT] Erreur lors de la suppression:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur serveur lors de la suppression du compte' 
    });
  }
});

/**
 * POST /me/account/deactivate
 * D√©sactivation temporaire du compte (alternative √† la suppression)
 */
router.post('/me/account/deactivate', auth, async (req, res) => {
  try {
    const { password, reason = 'D√©sactivation volontaire' } = req.body;
    
    console.log(`‚è∏Ô∏è [DEACTIVATE ACCOUNT] Demande de d√©sactivation pour l'utilisateur ${req.user.id}`);
    
    // R√©cup√©rer l'utilisateur
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        error: 'Utilisateur non trouv√©' 
      });
    }
    
    // V√©rifier le mot de passe
    if (!password) {
      return res.status(400).json({ 
        success: false, 
        error: 'Mot de passe requis pour la d√©sactivation du compte' 
      });
    }
    
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(400).json({ 
        success: false, 
        error: 'Mot de passe incorrect' 
      });
    }
    
    // Emp√™cher la d√©sactivation des comptes admin
    if (user.isAdmin || ['admin', 'super_admin', 'moderator'].includes(user.role)) {
      return res.status(403).json({ 
        success: false, 
        error: 'Les comptes administrateurs ne peuvent pas √™tre d√©sactiv√©s.' 
      });
    }
    
    // D√©sactiver le compte
    const updatedUser = await User.findByIdAndUpdate(req.user.id, {
      status: 'inactive',
      deactivatedAt: new Date(),
      deactivationReason: reason,
      adminNotes: `${user.adminNotes || ''}\n[${new Date().toISOString()}] D√âSACTIV√â par l'utilisateur: ${reason}`
    }, { new: true });
    
    console.log(`‚è∏Ô∏è [DEACTIVATE ACCOUNT] Compte d√©sactiv√©: ${user.email}`);
    
    res.json({
      success: true,
      message: 'Votre compte a √©t√© d√©sactiv√©. Vous pouvez le r√©activer en vous reconnectant.',
      status: updatedUser.status,
      deactivatedAt: updatedUser.deactivatedAt
    });
    
  } catch (error) {
    console.error('‚ùå [DEACTIVATE ACCOUNT] Erreur lors de la d√©sactivation:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur serveur lors de la d√©sactivation du compte' 
    });
  }
});

module.exports = router;