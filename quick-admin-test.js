/**
 * üß™ TEST RAPIDE API ADMIN TRADES
 */

const axios = require('axios');

const quickTest = async () => {
  try {
    console.log('üß™ TEST RAPIDE API ADMIN TRADES');
    console.log('===============================');

    // 1. Cr√©er un admin et se connecter
    console.log('üìã 1. Authentification admin...');
    
    try {
      await axios.post('http://localhost:3001/api/auth/register', {
        pseudo: 'AdminTest',
        email: 'admin@cadok.test',
        password: 'AdminTest123!',
        city: 'Test'
      });
    } catch (e) {
      // Ignore si l'admin existe d√©j√†
    }

    // Mettre √† jour le r√¥le de l'utilisateur en admin directement en base
    const mongoose = require('mongoose');
    await mongoose.connect('mongodb://localhost:27017/cadok');
    
    const User = require('./models/User');
    await User.findOneAndUpdate(
      { email: 'admin@cadok.test' },
      { role: 'admin', isAdmin: true },
      { upsert: true }
    );
    
    console.log('‚úÖ Admin cr√©√©/mis √† jour');

    // Se connecter
    const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
      email: 'admin@cadok.test',
      password: 'AdminTest123!'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ Connexion admin r√©ussie');

    // 2. Tester l'API des √©changes
    console.log('\nüìã 2. Test r√©cup√©ration des √©changes...');
    
    const tradesResponse = await axios.get('http://localhost:3001/api/admin/trades', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log(`‚úÖ ${tradesResponse.data.length} √©changes r√©cup√©r√©s`);

    // 3. Tester les statistiques
    console.log('\nüìã 3. Test r√©cup√©ration des statistiques...');
    
    const statsResponse = await axios.get('http://localhost:3001/api/admin/trades/stats', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log('‚úÖ Statistiques r√©cup√©r√©es:', statsResponse.data);

    // 4. Tester un √©change en attente si disponible
    const pendingTrades = tradesResponse.data.filter(t => t.status === 'pending');
    
    if (pendingTrades.length > 0) {
      console.log('\nüìã 4. Test approbation d\'un √©change...');
      
      const tradeId = pendingTrades[0]._id;
      const approveResponse = await axios.put(
        `http://localhost:3001/api/admin/trades/${tradeId}/approve`,
        { adminNotes: 'Approuv√© par test automatis√©' },
        { headers: { 'Authorization': `Bearer ${token}` } }
      );

      if (approveResponse.data.success) {
        console.log('‚úÖ Approbation r√©ussie');
      } else {
        console.log('‚ö†Ô∏è √âchec approbation');
      }
    }

    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('Le syst√®me de supervision des √©changes fonctionne correctement.');

    await mongoose.disconnect();

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
  }
};

quickTest();
