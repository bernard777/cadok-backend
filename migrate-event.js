/**
 * Script pour migrer un √©v√©nement de cadok_test vers cadok
 */

const mongoose = require('mongoose');

async function migrateEvent() {
  try {
    // Connexion √† cadok_test
    await mongoose.connect('mongodb://localhost:27017/cadok_test');
    console.log('‚úÖ Connect√© √† cadok_test');

    // Sch√©ma simple pour r√©cup√©rer l'√©v√©nement
    const EventSchema = new mongoose.Schema({}, { strict: false });
    const EventTest = mongoose.model('Event', EventSchema);

    // R√©cup√©rer l'√©v√©nement sp√©cifique
    const eventFromTest = await EventTest.findById('68984b8458eb74e10182704b');
    
    if (!eventFromTest) {
      console.log('‚ùå √âv√©nement non trouv√© dans cadok_test');
      return;
    }

    console.log('üì¶ √âv√©nement trouv√©:', eventFromTest.name);
    const eventData = eventFromTest.toObject();
    delete eventData._id; // Laisser MongoDB g√©n√©rer un nouvel ID
    delete eventData.__v;

    // D√©connexion de cadok_test
    await mongoose.disconnect();

    // Connexion √† cadok
    await mongoose.connect('mongodb://localhost:27017/cadok');
    console.log('‚úÖ Connect√© √† cadok');

    const EventProd = mongoose.model('Event', EventSchema);
    
    // Cr√©er l'√©v√©nement dans cadok
    const newEvent = new EventProd(eventData);
    await newEvent.save();
    
    console.log('‚úÖ √âv√©nement copi√© vers cadok avec ID:', newEvent._id);

    await mongoose.disconnect();
    console.log('‚úÖ Migration termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur migration:', error);
  }
}

migrateEvent();
