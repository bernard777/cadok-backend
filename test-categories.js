// Script de test pour v√©rifier la structure des donn√©es de l'API
const mongoose = require('mongoose');
const ObjectModel = require(__dirname + '/models/Object');
require('dotenv').config();

async function testFeedData() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // R√©cup√©rer quelques objets avec populate
    const objects = await ObjectModel.find()
      .limit(3)
      .populate('owner', 'pseudo city')
      .populate('category', 'name');
    
    console.log('üìÑ Exemple d\'objets avec cat√©gories peupl√©es:');
    objects.forEach((obj, index) => {
      console.log(`\n--- Objet ${index + 1} ---`);
      console.log('Titre:', obj.title);
      console.log('Cat√©gorie (type):', typeof obj.category);
      console.log('Cat√©gorie (valeur):', obj.category);
      if (obj.category && typeof obj.category === 'object') {
        console.log('Cat√©gorie nom:', obj.category.name);
      }
    });

    // R√©cup√©rer aussi sans populate pour voir la diff√©rence
    const objectsWithoutPopulate = await ObjectModel.find().limit(3);
    console.log('\nüìÑ Exemple d\'objets SANS cat√©gories peupl√©es:');
    objectsWithoutPopulate.forEach((obj, index) => {
      console.log(`\n--- Objet ${index + 1} ---`);
      console.log('Titre:', obj.title);
      console.log('Cat√©gorie (type):', typeof obj.category);
      console.log('Cat√©gorie (valeur):', obj.category);
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ D√©connect√© de MongoDB');
    process.exit(0);
  }
}

testFeedData();
