require('dotenv').config();

const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

console.log('üì¶ LISTE DES PRODUITS ET PRIX STRIPE');
console.log('====================================\n');

async function listStripeProducts() {
  try {
    // R√©cup√©rer tous les produits
    const products = await stripe.products.list({ limit: 20 });
    
    if (products.data.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun produit trouv√© dans votre compte Stripe');
      console.log('üí° Ex√©cutez "node create-stripe-products.js" pour cr√©er les plans Cadok');
      return;
    }

    console.log(`üìä ${products.data.length} produit(s) trouv√©(s) :\n`);

    for (const product of products.data) {
      console.log(`üè∑Ô∏è  ${product.name}`);
      console.log(`   ID Produit: ${product.id}`);
      console.log(`   Description: ${product.description || 'Aucune'}`);
      console.log(`   Actif: ${product.active ? '‚úÖ Oui' : '‚ùå Non'}`);
      
      // R√©cup√©rer les prix associ√©s √† ce produit
      const prices = await stripe.prices.list({ 
        product: product.id,
        limit: 10
      });

      if (prices.data.length > 0) {
        console.log('   üí∞ Prix associ√©s :');
        prices.data.forEach(price => {
          const amount = price.unit_amount / 100;
          const currency = price.currency.toUpperCase();
          const interval = price.recurring ? `/${price.recurring.interval}` : ' (unique)';
          
          console.log(`      - ${amount}${currency}${interval} (${price.id})`);
          console.log(`        Actif: ${price.active ? '‚úÖ' : '‚ùå'}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è  Aucun prix associ√©');
      }
      
      console.log('');
    }

    // Chercher sp√©cifiquement les plans Cadok
    const cadokProducts = products.data.filter(p => 
      p.metadata?.app === 'cadok' || 
      p.name.toLowerCase().includes('cadok') ||
      p.name.toLowerCase().includes('basic') ||
      p.name.toLowerCase().includes('premium')
    );

    if (cadokProducts.length > 0) {
      console.log('üéØ PRODUITS CADOK D√âTECT√âS :');
      console.log('============================\n');
      
      for (const product of cadokProducts) {
        const prices = await stripe.prices.list({ product: product.id });
        
        if (prices.data.length > 0) {
          const price = prices.data[0]; // Prendre le premier prix
          const planType = product.metadata?.plan_id || 
                          (product.name.toLowerCase().includes('basic') ? 'basic' : 'premium');
          
          console.log(`${planType.toUpperCase()}_PRICE_ID=${price.id}`);
        }
      }
      
      console.log('\nüí° Copiez ces IDs dans votre fichier .env si n√©cessaire');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des produits :', error.message);
  }
}

// Fonction pour nettoyer les anciens produits (optionnel)
async function cleanupProducts() {
  try {
    console.log('üßπ NETTOYAGE DES PRODUITS DE TEST');
    console.log('==================================\n');
    
    const products = await stripe.products.list({ limit: 20 });
    const testProducts = products.data.filter(p => 
      p.name.includes('Test') || 
      p.name.includes('test') ||
      p.metadata?.test === 'true'
    );

    if (testProducts.length === 0) {
      console.log('‚úÖ Aucun produit de test √† nettoyer');
      return;
    }

    console.log(`üóëÔ∏è  ${testProducts.length} produit(s) de test trouv√©(s) :`);
    for (const product of testProducts) {
      console.log(`   - ${product.name} (${product.id})`);
    }

    console.log('\n‚ö†Ô∏è  Pour supprimer, utilisez le Dashboard Stripe ou modifiez ce script');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage :', error.message);
  }
}

// Menu principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    await cleanupProducts();
  } else {
    await listStripeProducts();
  }
}

main().catch(console.error);
