/**
 * üß™ TEST COMPLET DES APIS TROC BIDIRECTIONNEL
 * Simulation d'un √©change complet Marie ‚Üî Thomas
 */

const axios = require('axios');

// Configuration
const API_BASE = 'http://localhost:3000/api';

// Donn√©es de test
const testTrade = {
    _id: 'TR-BIDIRECTIONAL-TEST-001',
    fromUser: {
        _id: 'user_marie',
        firstName: 'Marie',
        lastName: 'Dupont',
        address: {
            street: '25 Rue de la R√©publique',
            city: 'Paris',
            zipCode: '75001',
            country: 'France'
        }
    },
    toUser: {
        _id: 'user_thomas',
        firstName: 'Thomas',
        lastName: 'Dorel',
        address: {
            street: '12 Rue des Acacias',
            city: 'Lyon',
            zipCode: '69001',
            country: 'France'
        }
    },
    itemSent: {
        title: 'Livre "Clean Code"',
        weight: 350
    },
    itemReceived: {
        title: 'Jeu PlayStation "God of War"',
        weight: 200
    },
    status: 'accepted'
};

class BidirectionalAPITester {
    constructor() {
        this.tradeId = testTrade._id;
    }
    
    async runCompleteTest() {
        console.log('üöÄ D√âBUT DU TEST COMPLET APIS BIDIRECTIONNELLES\n');
        
        try {
            // √âtape 1: Cr√©er les livraisons bidirectionnelles
            await this.testCreateBidirectionalDelivery();
            
            // √âtape 2: V√©rifier le statut initial
            await this.testGetBidirectionalStatus();
            
            // √âtape 3: Marie confirme son exp√©dition
            await this.testConfirmShipment('fromUser', 'Marie');
            
            // √âtape 4: V√©rifier le statut apr√®s exp√©dition partielle
            await this.testGetBidirectionalStatus();
            
            // √âtape 5: Thomas confirme son exp√©dition
            await this.testConfirmShipment('toUser', 'Thomas');
            
            // √âtape 6: V√©rifier le statut apr√®s les deux exp√©ditions
            await this.testGetBidirectionalStatus();
            
            // √âtape 7: Arriv√©e du colis de Marie chez Thomas
            await this.testConfirmArrival('fromUser', 'Marie ‚Üí Thomas');
            
            // √âtape 8: Arriv√©e du colis de Thomas chez Marie
            await this.testConfirmArrival('toUser', 'Thomas ‚Üí Marie');
            
            // √âtape 9: V√©rifier le statut apr√®s les deux arriv√©es
            await this.testGetBidirectionalStatus();
            
            // √âtape 10: Thomas r√©cup√®re son colis
            await this.testConfirmPickup('fromUser', 'Thomas r√©cup√®re');
            
            // √âtape 11: Marie r√©cup√®re son colis
            await this.testConfirmPickup('toUser', 'Marie r√©cup√®re');
            
            // √âtape 12: V√©rifier le statut final
            await this.testGetBidirectionalStatus();
            
            // √âtape 13: Tester les instructions utilisateur
            await this.testGetUserInstructions();
            
            console.log('\nüéâ TEST COMPLET TERMIN√â AVEC SUCC√àS !');
            
        } catch (error) {
            console.error('‚ùå ERREUR LORS DU TEST:', error.message);
            if (error.response) {
                console.error('D√©tails:', error.response.data);
            }
        }
    }
    
    async testCreateBidirectionalDelivery() {
        console.log('üì¶ TEST: Cr√©ation livraisons bidirectionnelles');
        
        try {
            const response = await axios.post(
                `${API_BASE}/trades/${this.tradeId}/bidirectional-delivery`,
                testTrade
            );
            
            if (response.data.success) {
                console.log('‚úÖ Livraisons cr√©√©es avec succ√®s');
                console.log(`   ‚Ä¢ Status: ${response.data.data.deliveryStatus}`);
                console.log(`   ‚Ä¢ Total livraisons: ${response.data.data.summary.totalDeliveries}`);
                console.log(`   ‚Ä¢ Code Marie ‚Üí Thomas: ${response.data.data.fromUserDelivery.withdrawalCode}`);
                console.log(`   ‚Ä¢ Code Thomas ‚Üí Marie: ${response.data.data.toUserDelivery.withdrawalCode}`);
                
                // Sauvegarder les codes pour les tests suivants
                this.fromUserCode = response.data.data.fromUserDelivery.withdrawalCode;
                this.toUserCode = response.data.data.toUserDelivery.withdrawalCode;
            } else {
                throw new Error('√âchec cr√©ation livraisons');
            }
            
        } catch (error) {
            console.log('‚ùå Erreur cr√©ation livraisons:', error.message);
            // Simuler la cr√©ation pour continuer le test
            this.fromUserCode = 'CADOK-MT-TEST1';
            this.toUserCode = 'CADOK-TM-TEST2';
            console.log('‚ö†Ô∏è  Simulation des codes pour continuer le test');
        }
        
        console.log('');
    }
    
    async testConfirmShipment(userRole, userName) {
        console.log(`üì¶ TEST: Confirmation exp√©dition ${userName} (${userRole})`);
        
        try {
            const trackingNumber = `3S00${Math.floor(Math.random() * 1000000000)}`;
            
            const response = await axios.post(
                `${API_BASE}/trades/${this.tradeId}/confirm-shipment/${userRole}`,
                {
                    trackingNumber,
                    shippingDate: new Date().toISOString()
                }
            );
            
            if (response.data.success) {
                console.log(`‚úÖ Exp√©dition confirm√©e pour ${userName}`);
                console.log(`   ‚Ä¢ Num√©ro de suivi: ${trackingNumber}`);
                console.log(`   ‚Ä¢ Nouveau status: ${response.data.data.deliveryStatus}`);
                console.log(`   ‚Ä¢ Prochaine action Marie: ${response.data.data.nextActions.fromUser.text}`);
                console.log(`   ‚Ä¢ Prochaine action Thomas: ${response.data.data.nextActions.toUser.text}`);
            } else {
                throw new Error('√âchec confirmation exp√©dition');
            }
            
        } catch (error) {
            console.log(`‚ùå Erreur confirmation exp√©dition ${userName}:`, error.message);
        }
        
        console.log('');
    }
    
    async testConfirmArrival(userRole, description) {
        console.log(`üè™ TEST: Confirmation arriv√©e ${description} (${userRole})`);
        
        try {
            const response = await axios.post(
                `${API_BASE}/trades/${this.tradeId}/confirm-arrival/${userRole}`,
                {
                    arrivalDate: new Date().toISOString(),
                    pickupPointConfirmation: `Re√ßu par point relais - ${Date.now()}`
                }
            );
            
            if (response.data.success) {
                console.log(`‚úÖ Arriv√©e confirm√©e pour ${description}`);
                console.log(`   ‚Ä¢ Code de retrait: ${response.data.data.withdrawalCode}`);
                console.log(`   ‚Ä¢ Point relais: ${response.data.data.pickupPoint.name}`);
                console.log(`   ‚Ä¢ Nouveau status: ${response.data.data.deliveryStatus}`);
            } else {
                throw new Error('√âchec confirmation arriv√©e');
            }
            
        } catch (error) {
            console.log(`‚ùå Erreur confirmation arriv√©e ${description}:`, error.message);
        }
        
        console.log('');
    }
    
    async testConfirmPickup(userRole, description) {
        console.log(`üì¨ TEST: Confirmation r√©cup√©ration ${description} (${userRole})`);
        
        try {
            const withdrawalCode = userRole === 'fromUser' ? this.fromUserCode : this.toUserCode;
            
            const response = await axios.post(
                `${API_BASE}/trades/${this.tradeId}/confirm-pickup/${userRole}`,
                {
                    pickupDate: new Date().toISOString(),
                    withdrawalCodeUsed: withdrawalCode,
                    recipientId: `ID_${userRole.toUpperCase()}_${Date.now()}`
                }
            );
            
            if (response.data.success) {
                console.log(`‚úÖ R√©cup√©ration confirm√©e pour ${description}`);
                console.log(`   ‚Ä¢ Code utilis√©: ${withdrawalCode}`);
                console.log(`   ‚Ä¢ Nouveau status: ${response.data.data.deliveryStatus}`);
                console.log(`   ‚Ä¢ Troc termin√©: ${response.data.data.isTradeCompleted ? 'OUI' : 'NON'}`);
                console.log(`   ‚Ä¢ Status troc: ${response.data.data.tradeStatus}`);
            } else {
                throw new Error('√âchec confirmation r√©cup√©ration');
            }
            
        } catch (error) {
            console.log(`‚ùå Erreur confirmation r√©cup√©ration ${description}:`, error.message);
        }
        
        console.log('');
    }
    
    async testGetBidirectionalStatus() {
        console.log('üìä TEST: R√©cup√©ration statut bidirectionnel');
        
        try {
            const response = await axios.get(
                `${API_BASE}/trades/${this.tradeId}/bidirectional-status`
            );
            
            if (response.data.success) {
                const data = response.data.data;
                console.log('‚úÖ Statut r√©cup√©r√© avec succ√®s');
                console.log(`   ‚Ä¢ Status troc: ${data.tradeStatus}`);
                console.log(`   ‚Ä¢ Status livraison: ${data.deliveryStatus}`);
                console.log(`   ‚Ä¢ Marie (fromUser):`);
                console.log(`     - Status: ${data.fromUser.delivery.status}`);
                console.log(`     - Action: ${data.fromUser.nextAction.text}`);
                console.log(`   ‚Ä¢ Thomas (toUser):`);
                console.log(`     - Status: ${data.toUser.delivery.status}`);
                console.log(`     - Action: ${data.toUser.nextAction.text}`);
            } else {
                throw new Error('√âchec r√©cup√©ration statut');
            }
            
        } catch (error) {
            console.log('‚ùå Erreur r√©cup√©ration statut:', error.message);
        }
        
        console.log('');
    }
    
    async testGetUserInstructions() {
        console.log('üìã TEST: R√©cup√©ration instructions utilisateurs');
        
        for (const userRole of ['fromUser', 'toUser']) {
            const userName = userRole === 'fromUser' ? 'Marie' : 'Thomas';
            
            try {
                const response = await axios.get(
                    `${API_BASE}/trades/${this.tradeId}/user-instructions/${userRole}`
                );
                
                if (response.data.success) {
                    const data = response.data.data;
                    console.log(`‚úÖ Instructions pour ${userName} (${userRole})`);
                    console.log(`   ‚Ä¢ Role: ${data.instructions.role}`);
                    console.log(`   ‚Ä¢ Envoi: ${data.instructions.sending.title}`);
                    console.log(`   ‚Ä¢ R√©ception: ${data.instructions.receiving.title}`);
                    console.log(`   ‚Ä¢ Status actuel: ${data.currentStatus}`);
                } else {
                    throw new Error(`√âchec r√©cup√©ration instructions ${userName}`);
                }
                
            } catch (error) {
                console.log(`‚ùå Erreur instructions ${userName}:`, error.message);
            }
        }
        
        console.log('');
    }
}

// Simulation des APIs si le serveur n'est pas d√©marr√©
class MockAPIServer {
    constructor() {
        this.mockData = {
            deliveryStatus: 'labels_generated',
            fromUserDelivery: { 
                status: 'label_generated', 
                withdrawalCode: 'CADOK-MT-TEST1',
                trackingInfo: { status: 'label_created' }
            },
            toUserDelivery: { 
                status: 'label_generated', 
                withdrawalCode: 'CADOK-TM-TEST2',
                trackingInfo: { status: 'label_created' }
            }
        };
    }
    
    async runMockTest() {
        console.log('üé≠ MODE SIMULATION - APIS BIDIRECTIONNELLES\n');
        
        console.log('üì¶ Simulation: Cr√©ation livraisons bidirectionnelles');
        console.log('‚úÖ Livraisons cr√©√©es (simulation)');
        console.log('   ‚Ä¢ Code Marie ‚Üí Thomas: CADOK-MT-SIM001');
        console.log('   ‚Ä¢ Code Thomas ‚Üí Marie: CADOK-TM-SIM002');
        console.log('   ‚Ä¢ Status initial: labels_generated\n');
        
        console.log('üì¶ Simulation: Marie confirme son exp√©dition');
        this.mockData.fromUserDelivery.status = 'in_transit';
        this.mockData.deliveryStatus = 'partial_shipped';
        console.log('‚úÖ Exp√©dition Marie confirm√©e');
        console.log('   ‚Ä¢ Nouveau status: partial_shipped\n');
        
        console.log('üì¶ Simulation: Thomas confirme son exp√©dition');
        this.mockData.toUserDelivery.status = 'in_transit';
        this.mockData.deliveryStatus = 'both_shipped';
        console.log('‚úÖ Exp√©dition Thomas confirm√©e');
        console.log('   ‚Ä¢ Nouveau status: both_shipped\n');
        
        console.log('üè™ Simulation: Arriv√©e colis Marie chez Thomas');
        this.mockData.fromUserDelivery.status = 'arrived_at_pickup';
        this.mockData.deliveryStatus = 'partial_arrived';
        console.log('‚úÖ Colis Marie arriv√©');
        console.log('   ‚Ä¢ Code pour Thomas: CADOK-MT-SIM001\n');
        
        console.log('üè™ Simulation: Arriv√©e colis Thomas chez Marie');
        this.mockData.toUserDelivery.status = 'arrived_at_pickup';
        this.mockData.deliveryStatus = 'both_arrived';
        console.log('‚úÖ Colis Thomas arriv√©');
        console.log('   ‚Ä¢ Code pour Marie: CADOK-TM-SIM002\n');
        
        console.log('üì¨ Simulation: Thomas r√©cup√®re son colis');
        this.mockData.fromUserDelivery.status = 'delivered';
        this.mockData.deliveryStatus = 'partial_delivered';
        console.log('‚úÖ Thomas a r√©cup√©r√© son colis');
        console.log('   ‚Ä¢ Nouveau status: partial_delivered\n');
        
        console.log('üì¨ Simulation: Marie r√©cup√®re son colis');
        this.mockData.toUserDelivery.status = 'delivered';
        this.mockData.deliveryStatus = 'completed';
        console.log('‚úÖ Marie a r√©cup√©r√© son colis');
        console.log('   ‚Ä¢ Nouveau status: completed\n');
        
        console.log('üìä Status final du troc bidirectionnel:');
        console.log('   ‚Ä¢ Status livraison: completed');
        console.log('   ‚Ä¢ Status troc: completed');
        console.log('   ‚Ä¢ Marie: delivered ‚úÖ');
        console.log('   ‚Ä¢ Thomas: delivered ‚úÖ');
        console.log('   ‚Ä¢ √âchange mutuel r√©ussi ! üéâ\n');
        
        console.log('‚ú® SIMULATION COMPL√àTE TERMIN√âE AVEC SUCC√àS !');
    }
}

// Fonction principale
async function main() {
    const args = process.argv.slice(2);
    const isSimulation = args.includes('--simulation') || args.includes('-s');
    
    console.log('üîÑ TESTS APIS TROC BIDIRECTIONNEL');
    console.log('=====================================\n');
    
    if (isSimulation) {
        const mockServer = new MockAPIServer();
        await mockServer.runMockTest();
    } else {
        console.log('‚ö†Ô∏è  Mode API r√©el - Serveur requis sur localhost:3000');
        console.log('üí° Utilisez --simulation pour tester sans serveur\n');
        
        const tester = new BidirectionalAPITester();
        await tester.runCompleteTest();
    }
}

// Ex√©cuter si ce fichier est lanc√© directement
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { BidirectionalAPITester, MockAPIServer };
