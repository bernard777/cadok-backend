/**
 * VRAI TEST E2E - S√©curit√© et Protection
 * Tests de s√©curit√©, rate limiting, validation, injection, etc.
 */

const request = require('supertest');
const app = require('../../app');
const User = require('../../models/User');
const jwt = require('jsonwebtoken');

describe('üõ°Ô∏è WORKFLOW E2E COMPLET - S√âCURIT√â ET PROTECTION', () => {
  
  let testUser, testToken, userId;
  let maliciousUser, maliciousToken;

  beforeEach(async () => {
    // Cr√©er un utilisateur normal pour les tests
    const userData = {
      pseudo: 'SecurityUser_' + Date.now(),
      email: `security_${Date.now()}@cadok.com`,
      password: 'SecurePassword123!',
      firstName: 'John',
      lastName: 'Security',
      city: 'Paris',
      zipCode: '75001'
    };

    const registerResponse = await request(app)
      .post('/api/auth/register')
      .send(userData);
    
    userId = registerResponse.body.user._id;
    
    const loginResponse = await request(app)
      .post('/api/auth/login')
      .send({
        email: userData.email,
        password: userData.password
      });
    
    testToken = loginResponse.body.token;
    testUser = registerResponse.body.user;

    // Cr√©er un utilisateur malveillant
    const maliciousData = {
      pseudo: 'MaliciousUser_' + Date.now(),
      email: `malicious_${Date.now()}@cadok.com`,
      password: 'MaliciousPass123!',
      firstName: 'Evil',
      lastName: 'Hacker',
      city: 'Darkness',
      zipCode: '66666'
    };

    const maliciousRegisterResponse = await request(app)
      .post('/api/auth/register')
      .send(maliciousData);
    
    const maliciousLoginResponse = await request(app)
      .post('/api/auth/login')
      .send({
        email: maliciousData.email,
        password: maliciousData.password
      });
    
    maliciousToken = maliciousLoginResponse.body.token;
    maliciousUser = maliciousRegisterResponse.body.user;
  });

  test('üéØ WORKFLOW S√âCURIT√â COMPLET: Validation ‚Üí Rate Limiting ‚Üí Injections ‚Üí Auth', async () => {
    
    // ===== PHASE 1: TESTS DE VALIDATION D'ENTR√âE =====
    console.log('‚úÖ PHASE 1: Tests de validation d\'entr√©e...');
    
    // Test XSS dans cr√©ation d'objet
    const xssResponse = await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: '<script>alert("XSS")</script>',
        description: '<img src="x" onerror="alert(\'XSS\')">',
        category: '√âlectronique',
        condition: 'Bon √©tat',
        estimatedValue: 100
      });
    
    expect(xssResponse.status).toBe(400);
    console.log('‚úÖ Tentative XSS correctement bloqu√©e');
    
    // Test injection SQL dans recherche
    const sqlInjectionResponse = await request(app)
      .get('/api/objects/search?query=\'; DROP TABLE users; --')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(sqlInjectionResponse.status).toBe(400);
    console.log('‚úÖ Tentative injection SQL correctement bloqu√©e');
    
    // Test donn√©es malform√©es
    const malformedDataResponse = await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: '', // Titre vide
        description: 'a'.repeat(10000), // Description trop longue
        category: 'CategoryInexistante',
        estimatedValue: -100 // Valeur n√©gative
      });
    
    expect(malformedDataResponse.status).toBe(400);
    expect(malformedDataResponse.body).toHaveProperty('success', false);
    console.log('‚úÖ Donn√©es malform√©es correctement rejet√©es');

    // ===== PHASE 2: TESTS DE RATE LIMITING =====
    console.log('‚è±Ô∏è PHASE 2: Tests de rate limiting...');
    
    // Tentative de spam sur l'inscription
    const rateLimitPromises = [];
    for (let i = 0; i < 10; i++) {
      rateLimitPromises.push(
        request(app)
          .post('/api/auth/register')
          .send({
            pseudo: `SpamUser${i}`,
            email: `spam${i}@test.com`,
            password: 'SpamPassword123!'
          })
      );
    }
    
    const rateLimitResults = await Promise.all(rateLimitPromises);
    const blockedRequests = rateLimitResults.filter(res => res.status === 429);
    
    expect(blockedRequests.length).toBeGreaterThan(0);
    console.log(`‚úÖ Rate limiting actif: ${blockedRequests.length} requ√™tes bloqu√©es`);

    // ===== PHASE 3: TESTS D'AUTORISATION =====
    console.log('üîê PHASE 3: Tests d\'autorisation...');
    
    // Cr√©er un objet avec l'utilisateur normal
    const objectResponse = await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: 'Objet √† prot√©ger',
        description: 'Objet que personne d\'autre ne doit modifier',
        category: '√âlectronique',
        condition: 'Bon √©tat',
        estimatedValue: 200
      });
    
    const objectId = objectResponse.body.object._id;
    
    // Tentative de modification par utilisateur malveillant
    const unauthorizedEditResponse = await request(app)
      .put(`/api/objects/${objectId}`)
      .set('Authorization', `Bearer ${maliciousToken}`)
      .send({
        title: 'Objet pirat√©!',
        description: 'J\'ai pris le contr√¥le!'
      });
    
    expect(unauthorizedEditResponse.status).toBe(403);
    console.log('‚úÖ Modification non autoris√©e correctement bloqu√©e');
    
    // Tentative de suppression par utilisateur malveillant
    const unauthorizedDeleteResponse = await request(app)
      .delete(`/api/objects/${objectId}`)
      .set('Authorization', `Bearer ${maliciousToken}`);
    
    expect(unauthorizedDeleteResponse.status).toBe(403);
    console.log('‚úÖ Suppression non autoris√©e correctement bloqu√©e');

    // ===== PHASE 4: TESTS DE TOKEN JWT =====
    console.log('üé´ PHASE 4: Tests de s√©curit√© JWT...');
    
    // Test avec token expir√© simul√©
    const expiredToken = jwt.sign(
      { userId: userId, email: testUser.email },
      process.env.JWT_SECRET || 'test_secret',
      { expiresIn: '-1h' } // Token expir√©
    );
    
    const expiredTokenResponse = await request(app)
      .get('/api/objects/user')
      .set('Authorization', `Bearer ${expiredToken}`);
    
    expect(expiredTokenResponse.status).toBe(401);
    console.log('‚úÖ Token expir√© correctement rejet√©');
    
    // Test avec token malform√©
    const malformedTokenResponse = await request(app)
      .get('/api/objects/user')
      .set('Authorization', 'Bearer token_malformed_invalid');
    
    expect(malformedTokenResponse.status).toBe(401);
    console.log('‚úÖ Token malform√© correctement rejet√©');
    
    // Test avec token modifi√©
    const parts = testToken.split('.');
    const modifiedToken = parts[0] + '.modified_payload.' + parts[2];
    
    const modifiedTokenResponse = await request(app)
      .get('/api/objects/user')
      .set('Authorization', `Bearer ${modifiedToken}`);
    
    expect(modifiedTokenResponse.status).toBe(401);
    console.log('‚úÖ Token modifi√© correctement rejet√©');

    // ===== PHASE 5: TESTS DE PROTECTION CSRF =====
    console.log('üõ°Ô∏è PHASE 5: Tests de protection CSRF...');
    
    // Tentative de requ√™te sans header appropri√©
    const csrfResponse = await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .set('Origin', 'http://malicious-site.com')
      .send({
        title: 'Tentative CSRF',
        description: 'Requ√™te depuis site malveillant'
      });
    
    // La requ√™te devrait √™tre bloqu√©e ou n√©cessiter un token CSRF
    expect([400, 403, 429]).toContain(csrfResponse.status);
    console.log('‚úÖ Protection CSRF active');

    // ===== PHASE 6: TESTS DE S√âCURIT√â MOTS DE PASSE =====
    console.log('üîë PHASE 6: Tests de s√©curit√© mots de passe...');
    
    // Test changement de mot de passe avec ancien mot de passe incorrect
    const wrongPasswordResponse = await request(app)
      .post('/api/auth/change-password')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        currentPassword: 'WrongPassword123!',
        newPassword: 'NewSecurePassword123!'
      });
    
    expect(wrongPasswordResponse.status).toBe(400);
    console.log('‚úÖ Changement avec mauvais mot de passe rejet√©');
    
    // Test mot de passe faible
    const weakPasswordResponse = await request(app)
      .post('/api/auth/register')
      .send({
        pseudo: 'WeakPassUser',
        email: 'weak@test.com',
        password: '123', // Mot de passe trop faible
        firstName: 'Weak',
        lastName: 'User'
      });
    
    expect(weakPasswordResponse.status).toBe(400);
    console.log('‚úÖ Mot de passe faible correctement rejet√©');

    // ===== PHASE 7: TESTS DE PROTECTION DES DONN√âES =====
    console.log('üîí PHASE 7: Tests de protection des donn√©es...');
    
    // V√©rifier que les mots de passe ne sont pas retourn√©s
    const userProfileResponse = await request(app)
      .get('/api/auth/profile')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(userProfileResponse.status).toBe(200);
    expect(userProfileResponse.body.user).not.toHaveProperty('password');
    expect(userProfileResponse.body.user).not.toHaveProperty('passwordHash');
    console.log('‚úÖ Mots de passe prot√©g√©s dans les r√©ponses');
    
    // Test acc√®s aux donn√©es d'autres utilisateurs
    const otherUserDataResponse = await request(app)
      .get(`/api/users/${maliciousUser.id}`)
      .set('Authorization', `Bearer ${testToken}`);
    
    // Seules les donn√©es publiques devraient √™tre accessibles
    expect(otherUserDataResponse.status).toBe(200);
    expect(otherUserDataResponse.body.user).not.toHaveProperty('email');
    expect(otherUserDataResponse.body.user).not.toHaveProperty('city');
    console.log('‚úÖ Donn√©es priv√©es prot√©g√©es');

    // ===== PHASE 8: TESTS DE MONITORING ET LOGS =====
    console.log('üìä PHASE 8: Tests de monitoring et logs...');
    
    // Tentative d'attaque qui devrait √™tre logg√©e
    await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: '<?php system($_GET["cmd"]); ?>',
        description: 'Tentative d\'injection PHP'
      });
    
    // V√©rifier que les tentatives d'attaque sont logg√©es
    const securityLogsResponse = await request(app)
      .get('/api/admin/security-logs')
      .set('Authorization', `Bearer ${testToken}`);
    
    // Cette route devrait exister pour les admins
    expect([200, 403, 404]).toContain(securityLogsResponse.status);
    console.log('‚úÖ Syst√®me de logs de s√©curit√© en place');

    console.log('üéâ WORKFLOW S√âCURIT√â E2E COMPLET R√âUSSI!');
    console.log('üìä R√©sum√© de s√©curit√©:');
    console.log('   ‚úÖ Protection XSS/injection SQL');
    console.log('   ‚úÖ Rate limiting fonctionnel');
    console.log('   ‚úÖ Autorisation stricte');
    console.log('   ‚úÖ S√©curit√© JWT robuste');
    console.log('   ‚úÖ Protection CSRF');
    console.log('   ‚úÖ Validation mots de passe');
    console.log('   ‚úÖ Protection des donn√©es sensibles');
    console.log('   ‚úÖ Monitoring actif');
    
  }, 120000); // Timeout de 2 minutes pour tous les tests de s√©curit√©

  test('üï≥Ô∏è WORKFLOW E2E - Tests d\'intrusion et failles avanc√©es', async () => {
    
    // ===== TEST 1: TENTATIVE DE PRIVILEGE ESCALATION =====
    console.log('‚¨ÜÔ∏è Test: Tentative d\'escalade de privil√®ges...');
    
    const adminAccessResponse = await request(app)
      .get('/api/admin/users')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(adminAccessResponse.status).toBe(403);
    console.log('‚úÖ Acc√®s admin correctement bloqu√© pour utilisateur normal');
    
    // ===== TEST 2: TENTATIVE DE MANIPULATION D'ID =====
    console.log('üî¢ Test: Manipulation d\'ID d\'objets...');
    
    // Cr√©er un objet
    const objectResponse = await request(app)
      .post('/api/objects')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: 'Objet test manipulation',
        description: 'Test',
        category: 'Divers',
        estimatedValue: 50
      });
    
    const objectId = objectResponse.body.object._id;
    
    // Tenter de modifier l'ID propri√©taire dans la requ√™te
    const manipulationResponse = await request(app)
      .put(`/api/objects/${objectId}`)
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        title: 'Titre modifi√©',
        owner: maliciousUser.id // Tentative de changer le propri√©taire
      });
    
    expect(manipulationResponse.status).toBe(200);
    
    // V√©rifier que le propri√©taire n'a pas chang√©
    const verifyResponse = await request(app)
      .get(`/api/objects/${objectId}`)
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(verifyResponse.body.object.owner).toBe(userId);
    console.log('‚úÖ Manipulation d\'ID propri√©taire bloqu√©e');
    
    // ===== TEST 3: TENTATIVE DE MASS ASSIGNMENT =====
    console.log('üìù Test: Tentative de mass assignment...');
    
    const massAssignmentResponse = await request(app)
      .put(`/api/auth/profile`)
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        firstName: 'Nouveau nom',
        isAdmin: true, // Tentative d'auto-promotion
        role: 'administrator',
        permissions: ['*']
      });
    
    expect(massAssignmentResponse.status).toBe(200);
    
    // V√©rifier que les champs sensibles n'ont pas √©t√© modifi√©s
    const profileResponse = await request(app)
      .get('/api/auth/profile')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(profileResponse.body.user.firstName).toBe('Nouveau nom');
    expect(profileResponse.body.user).not.toHaveProperty('isAdmin');
    expect(profileResponse.body.user).not.toHaveProperty('role');
    console.log('‚úÖ Mass assignment s√©curis√©');
    
    // ===== TEST 4: TIMING ATTACK SUR LOGIN =====
    console.log('‚è±Ô∏è Test: Timing attack sur authentification...');
    
    const timingTests = [];
    
    // Test avec email existant mais mauvais mot de passe
    const start1 = Date.now();
    await request(app)
      .post('/api/auth/login')
      .send({
        email: testUser.email,
        password: 'WrongPassword123!'
      });
    const time1 = Date.now() - start1;
    
    // Test avec email inexistant
    const start2 = Date.now();
    await request(app)
      .post('/api/auth/login')
      .send({
        email: 'nonexistent@test.com',
        password: 'AnyPassword123!'
      });
    const time2 = Date.now() - start2;
    
    // Les temps devraient √™tre similaires pour √©viter l'√©num√©ration d'emails
    const timeDifference = Math.abs(time1 - time2);
    expect(timeDifference).toBeLessThan(100); // Moins de 100ms de diff√©rence
    console.log(`‚úÖ Protection timing attack: ${timeDifference}ms de diff√©rence`);
    
  }, 60000);

  test('üîç WORKFLOW E2E - Tests de divulgation d\'informations', async () => {
    
    console.log('üïµÔ∏è Test: Divulgation d\'informations sensibles...');
    
    // Test erreurs d√©taill√©es en production
    const errorResponse = await request(app)
      .get('/api/objects/invalid-id-format')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(errorResponse.status).toBe(400);
    // L'erreur ne devrait pas r√©v√©ler de d√©tails techniques
    expect(errorResponse.body.message).not.toContain('ObjectId');
    expect(errorResponse.body.message).not.toContain('mongoose');
    expect(errorResponse.body.message).not.toContain('MongoDB');
    console.log('‚úÖ Erreurs sanitis√©es pour la production');
    
    // Test headers de s√©curit√©
    const securityHeadersResponse = await request(app)
      .get('/api/objects')
      .set('Authorization', `Bearer ${testToken}`);
    
    expect(securityHeadersResponse.headers).toHaveProperty('x-content-type-options');
    expect(securityHeadersResponse.headers).toHaveProperty('x-frame-options');
    console.log('‚úÖ Headers de s√©curit√© pr√©sents');
    
  }, 30000);

});
