/**
 * FEATURE E2E - SYST√àME DE PAIEMENTS
 * Tests isol√©s pour abonnements, m√©thodes de paiement, et s√©curit√©
 */

const E2EHelpers = require('../../helpers/E2EHelpers');

describe('üí≥ FEATURE E2E - SYST√àME DE PAIEMENTS', () => {
  
  let testUser;

  beforeEach(async () => {
    // Utilisateur d√©di√© pour cette feature
    const result = await E2EHelpers.registerUser();
    expect(result.success).toBe(true);
    testUser = result;
  });

  afterEach(async () => {
    await E2EHelpers.cleanupTestData();
  });

  describe('üìã Plans d\'abonnement', () => {
    
    test('R√©cup√©ration de la liste des plans disponibles', async () => {
      const plansResult = await E2EHelpers.getSubscriptionPlans();
      
      expect(plansResult.success).toBe(true);
      expect(Array.isArray(plansResult.plans)).toBe(true);
      expect(plansResult.plans.length).toBeGreaterThan(0);
      
      // V√©rifier qu'il y a au moins un plan gratuit et un premium
      const freePlan = plansResult.plans.find(p => p.type === 'free');
      const premiumPlan = plansResult.plans.find(p => p.type === 'premium');
      
      expect(freePlan).toBeDefined();
      expect(premiumPlan).toBeDefined();
      expect(premiumPlan.price).toBeGreaterThan(0);
      
      console.log('‚úÖ Plans r√©cup√©r√©s:', plansResult.plans.length);
    });

    test('D√©tails d\'un plan sp√©cifique', async () => {
      const planDetails = await E2EHelpers.getSubscriptionPlan('premium');
      
      expect(planDetails.success).toBe(true);
      expect(planDetails.plan).toBeDefined();
      expect(planDetails.plan.type).toBe('premium');
      expect(planDetails.plan.features).toBeDefined();
      expect(Array.isArray(planDetails.plan.features)).toBe(true);
      
      console.log('‚úÖ D√©tails plan premium r√©cup√©r√©s');
    });

  });

  describe('üí≥ M√©thodes de paiement', () => {
    
    test('Ajout d\'une m√©thode de paiement (simulation)', async () => {
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4242424242424242', // Num√©ro de test Stripe
        expiryMonth: 12,
        expiryYear: 2025,
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const addResult = await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);
      
      expect(addResult.success).toBe(true);
      expect(addResult.paymentMethod).toBeDefined();
      expect(addResult.paymentMethod.type).toBe('card');
      expect(addResult.paymentMethod.lastFour).toBe('4242');
      
      console.log('‚úÖ M√©thode de paiement ajout√©e:', addResult.paymentMethod.id);
    });

    test('R√©cup√©ration des m√©thodes de paiement utilisateur', async () => {
      // D'abord ajouter une m√©thode
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4000000000000002', // Autre carte test
        expiryMonth: 6,
        expiryYear: 2026,
        cvc: '456',
        cardholderName: testUser.user.pseudo
      };

      await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);

      // Puis r√©cup√©rer la liste
      const methodsResult = await E2EHelpers.getPaymentMethods(testUser.token);
      
      expect(methodsResult.success).toBe(true);
      expect(Array.isArray(methodsResult.methods)).toBe(true);
      expect(methodsResult.methods.length).toBeGreaterThan(0);
      
      console.log('‚úÖ M√©thodes de paiement r√©cup√©r√©es:', methodsResult.methods.length);
    });

    test('Suppression d\'une m√©thode de paiement', async () => {
      // Ajouter une m√©thode
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4000000000000077',
        expiryMonth: 3,
        expiryYear: 2027,
        cvc: '789',
        cardholderName: testUser.user.pseudo
      };

      const addResult = await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);
      expect(addResult.success).toBe(true);

      // Supprimer la m√©thode
      const deleteResult = await E2EHelpers.deletePaymentMethod(testUser.token, addResult.paymentMethod.id);
      
      expect(deleteResult.success).toBe(true);
      console.log('‚úÖ M√©thode de paiement supprim√©e');
    });

  });

  describe('üîß Gestion d\'abonnement', () => {
    
    test('Souscription √† un abonnement premium', async () => {
      // D'abord ajouter une m√©thode de paiement
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4242424242424242',
        expiryMonth: 12,
        expiryYear: 2025,
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const paymentMethod = await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);
      expect(paymentMethod.success).toBe(true);

      // Souscrire √† premium
      const subscribeResult = await E2EHelpers.subscribeToplan(testUser.token, 'premium', paymentMethod.paymentMethod.id);
      
      expect(subscribeResult.success).toBe(true);
      expect(subscribeResult.subscription).toBeDefined();
      expect(subscribeResult.subscription.plan).toBe('premium');
      expect(subscribeResult.subscription.status).toBe('active');
      
      console.log('‚úÖ Abonnement premium souscrit:', subscribeResult.subscription.id);
    });

    test('Consultation du statut d\'abonnement', async () => {
      const statusResult = await E2EHelpers.getSubscriptionStatus(testUser.token);
      
      expect(statusResult.success).toBe(true);
      expect(statusResult.subscription).toBeDefined();
      // Par d√©faut, devrait √™tre 'free'
      expect(['free', 'premium', 'basic'].includes(statusResult.subscription.plan)).toBe(true);
      
      console.log('‚úÖ Statut abonnement:', statusResult.subscription.plan);
    });

    test('Annulation d\'abonnement premium', async () => {
      // Souscrire d'abord
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4242424242424242',
        expiryMonth: 12,
        expiryYear: 2025,
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const paymentMethod = await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);
      expect(paymentMethod.success).toBe(true);

      const subscribeResult = await E2EHelpers.subscribeToplan(testUser.token, 'premium', paymentMethod.paymentMethod.id);
      expect(subscribeResult.success).toBe(true);

      // Annuler
      const cancelResult = await E2EHelpers.cancelSubscription(testUser.token);
      
      expect(cancelResult.success).toBe(true);
      expect(cancelResult.subscription.status).toBe('cancelled');
      
      console.log('‚úÖ Abonnement annul√© avec succ√®s');
    });

  });

  describe('üõ°Ô∏è S√©curit√© des paiements', () => {
    
    test('Rejet de carte invalide', async () => {
      const invalidCardData = {
        type: 'card',
        cardNumber: '1234567890123456', // Num√©ro invalide
        expiryMonth: 12,
        expiryYear: 2025,
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const addResult = await E2EHelpers.addPaymentMethod(testUser.token, invalidCardData);
      
      expect(addResult.success).toBe(false);
      expect(addResult.status).toBe(400);
      console.log('‚úÖ Carte invalide correctement rejet√©e');
    });

    test('Rejet de carte expir√©e', async () => {
      const expiredCardData = {
        type: 'card',
        cardNumber: '4000000000000002',
        expiryMonth: 12,
        expiryYear: 2020, // Expir√©e
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const addResult = await E2EHelpers.addPaymentMethod(testUser.token, expiredCardData);
      
      expect(addResult.success).toBe(false);
      expect(addResult.status).toBe(400);
      console.log('‚úÖ Carte expir√©e correctement rejet√©e');
    });

    test('Protection contre acc√®s non autoris√© aux m√©thodes de paiement', async () => {
      // Cr√©er un autre utilisateur
      const otherUser = await E2EHelpers.registerUser();
      expect(otherUser.success).toBe(true);

      // Ajouter une m√©thode pour testUser
      const paymentMethodData = {
        type: 'card',
        cardNumber: '4242424242424242',
        expiryMonth: 12,
        expiryYear: 2025,
        cvc: '123',
        cardholderName: testUser.user.pseudo
      };

      const addResult = await E2EHelpers.addPaymentMethod(testUser.token, paymentMethodData);
      expect(addResult.success).toBe(true);

      // Tenter d'acc√©der avec l'autre utilisateur
      const unauthorizedAccess = await E2EHelpers.getPaymentMethods(otherUser.token);
      
      // Ne devrait pas voir les m√©thodes de testUser
      expect(unauthorizedAccess.success).toBe(true);
      expect(unauthorizedAccess.methods.length).toBe(0);
      
      console.log('‚úÖ Isolation des m√©thodes de paiement respect√©e');
    });

  });

  describe('üí∞ Simulation de paiements', () => {
    
    test('Paiement ponctuel r√©ussi', async () => {
      const paymentData = {
        amount: 1999, // 19.99‚Ç¨ en centimes
        currency: 'eur',
        description: 'Test paiement E2E',
        paymentMethodType: 'card'
      };

      const paymentResult = await E2EHelpers.processPayment(testUser.token, paymentData);
      
      expect(paymentResult.success).toBe(true);
      expect(paymentResult.payment).toBeDefined();
      expect(paymentResult.payment.status).toBe('succeeded');
      expect(paymentResult.payment.amount).toBe(paymentData.amount);
      
      console.log('‚úÖ Paiement ponctuel r√©ussi:', paymentResult.payment.id);
    });

    test('Paiement √©choue avec montant invalide', async () => {
      const invalidPaymentData = {
        amount: -100, // Montant n√©gatif
        currency: 'eur',
        description: 'Test paiement invalide',
        paymentMethodType: 'card'
      };

      const paymentResult = await E2EHelpers.processPayment(testUser.token, invalidPaymentData);
      
      expect(paymentResult.success).toBe(false);
      expect(paymentResult.status).toBe(400);
      console.log('‚úÖ Montant invalide correctement rejet√©');
    });

  });

});
