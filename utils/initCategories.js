const Category = require('../models/Category');

// 20 cat√©gories d'objets r√©ellement √©changeables - EN FRAN√áAIS
const defaultCategories = [
  {
    name: '√âlectronique',
    fields: ['marque', 'mod√®le', '√©tat', 'stockage', 'couleur', 'garantie', 'accessoires']
  },
  {
    name: 'V√™tements & Mode',
    fields: ['taille', 'marque', 'couleur', 'mati√®re', '√©tat', 'genre', 'saison']
  },
  {
    name: 'Livres & BD',
    fields: ['auteur', '√©diteur', '√©tat', 'langue', 'genre', '√©dition', 'isbn']
  },
  {
    name: 'Sports & Loisirs',
    fields: ['sport', 'marque', 'taille', '√©tat', 'mati√®re', 'niveau', 'accessoires']
  },
  {
    name: 'Maison & D√©coration',
    fields: ['pi√®ce', 'mati√®re', '√©tat', 'couleur', 'dimensions', 'style', 'marque']
  },
  {
    name: 'Jouets & Jeux',
    fields: ['tranche_√¢ge', 'marque', '√©tat', 'type', 'mati√®re', 'joueurs', '√©ducatif']
  },
  {
    name: 'Instruments de Musique',
    fields: ['instrument', 'marque', '√©tat', 'niveau', 'accessoires', 'vintage', '√©tui']
  },
  {
    name: 'V√©los & Trottinettes',
    fields: ['type', 'marque', '√©tat', 'taille', 'vitesses', '√©lectrique', 'accessoires']
  },
  {
    name: 'Beaut√© & Parfums',
    fields: ['marque', 'type', 'contenance', 'neuf_scell√©', '√©tat', 'genre', 'parfum']
  },
  {
    name: 'Bijoux & Montres',
    fields: ['type', 'mati√®re', 'marque', '√©tat', 'taille', 'style', 'authentique']
  },
  {
    name: 'Art & Objets de Collection',
    fields: ['type', '√©poque', '√©tat', 'dimensions', 'sign√©', 'authentique', 'raret√©']
  },
  {
    name: 'Jeux Vid√©o & Consoles',
    fields: ['plateforme', '√©tat', 'genre', 'langue', 'complet', 'ann√©e', 'multijoueur']
  },
  {
    name: 'DVD & Blu-ray',
    fields: ['format', 'genre', '√©tat', 'langue', 'sous_titres', 'ann√©e', '√©dition']
  },
  {
    name: '√âlectrom√©nager',
    fields: ['type', 'marque', '√©tat', 'capacit√©', 'puissance', 'garantie', 'classe_√©nergie']
  },
  {
    name: 'Pu√©riculture & B√©b√©',
    fields: ['type', 'marque', '√©tat', '√¢ge_min', '√¢ge_max', 's√©curit√©', '√©volutif']
  },
  {
    name: 'Jardin & Plein Air',
    fields: ['type', 'mati√®re', '√©tat', 'dimensions', 'saison', 'marque', 'entretien']
  },
  {
    name: 'Bricolage & Outillage',
    fields: ['type', 'marque', '√©tat', '√©lectrique', 'professionnel', 'accessoires', 'garantie']
  },
  {
    name: 'Cuisine & Arts de la Table',
    fields: ['type', 'mati√®re', 'marque', '√©tat', 'capacit√©', 'lave_vaisselle', 'set']
  },
  {
    name: 'Bagagerie & Maroquinerie',
    fields: ['type', 'marque', 'mati√®re', 'couleur', '√©tat', 'dimensions', 'authentique']
  },
  {
    name: 'Mat√©riel Informatique',
    fields: ['type', 'marque', 'mod√®le', '√©tat', 'compatibilit√©', 'garantie', 'accessoires']
  }
];

/**
 * Initialise les cat√©gories par d√©faut si elles n'existent pas
 * @returns {Promise<void>}
 */
async function initializeCategories() {
  try {
    // V√©rifier si des cat√©gories existent d√©j√† en nombre suffisant
    const existingCategoriesCount = await Category.countDocuments();
    const expectedCategoriesCount = defaultCategories.length;
    
    if (existingCategoriesCount >= expectedCategoriesCount) {
      console.log(`üì¶ [CATEGORIES] ${existingCategoriesCount} cat√©gories d√©j√† pr√©sentes - initialisation ignor√©e`);
      return;
    } else if (existingCategoriesCount > 0) {
      console.log(`‚ö†Ô∏è [CATEGORIES] ${existingCategoriesCount} cat√©gories trouv√©es, mais ${expectedCategoriesCount} attendues - r√©initialisation n√©cessaire`);
      console.log('üîÑ [CATEGORIES] Utilisation du script: node scripts/manage-categories.js reset');
      return;
    }

    console.log('üì¶ [CATEGORIES] Aucune cat√©gorie trouv√©e - initialisation en cours...');
    
    // Ins√©rer les cat√©gories par d√©faut
    let successCount = 0;
    let errorCount = 0;

    for (const categoryData of defaultCategories) {
      try {
        const category = new Category(categoryData);
        await category.save();
        successCount++;
        console.log(`‚úÖ [CATEGORIES] ${categoryData.name} cr√©√©e (${categoryData.fields.length} champs)`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå [CATEGORIES] Erreur pour ${categoryData.name}:`, error.message);
      }
    }

    console.log(`üéâ [CATEGORIES] Initialisation termin√©e: ${successCount} cr√©√©es, ${errorCount} erreurs`);
    
    // V√©rification finale
    const finalCount = await Category.countDocuments();
    console.log(`üìä [CATEGORIES] Total en base: ${finalCount} cat√©gories disponibles`);

  } catch (error) {
    console.error('‚ùå [CATEGORIES] Erreur lors de l\'initialisation:', error.message);
    throw error;
  }
}

/**
 * Force la r√©initialisation compl√®te des cat√©gories (supprime tout et recr√©e)
 * @returns {Promise<void>}
 */
async function reinitializeCategories() {
  try {
    console.log('üóëÔ∏è [CATEGORIES] Suppression des cat√©gories existantes...');
    const deletedCount = await Category.deleteMany({});
    console.log(`‚úÖ [CATEGORIES] ${deletedCount.deletedCount} cat√©gories supprim√©es`);

    console.log('üì¶ [CATEGORIES] Recr√©ation des cat√©gories...');
    
    let successCount = 0;
    for (const categoryData of defaultCategories) {
      try {
        const category = new Category(categoryData);
        await category.save();
        successCount++;
      } catch (error) {
        console.error(`‚ùå [CATEGORIES] Erreur pour ${categoryData.name}:`, error.message);
      }
    }

    console.log(`üéâ [CATEGORIES] R√©initialisation termin√©e: ${successCount}/${defaultCategories.length} cat√©gories cr√©√©es`);
    
  } catch (error) {
    console.error('‚ùå [CATEGORIES] Erreur lors de la r√©initialisation:', error.message);
    throw error;
  }
}

module.exports = {
  initializeCategories,
  reinitializeCategories,
  defaultCategories
};
