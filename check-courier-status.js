/**
 * V√âRIFICATION STATUS PROVIDER COURIER
 * ===================================
 * 
 * Script pour v√©rifier si un provider email a √©t√© configur√© dans Courier
 */

require('dotenv').config();

async function checkCourierStatus() {
    console.log('üîç === V√âRIFICATION STATUS COURIER ===\n');

    try {
        const { CourierClient } = require('@trycourier/courier');
        const courier = new CourierClient({ 
            authorizationToken: process.env.COURIER_AUTH_TOKEN 
        });

        console.log('‚úÖ Client Courier connect√©');
        console.log(`üîë Token: ${process.env.COURIER_AUTH_TOKEN.substring(0, 15)}...\n`);

        // Test d'envoi simple pour voir l'erreur
        const testEmail = 'ndongoambassa7@gmail.com';
        
        console.log('üìß Test d\'envoi pour v√©rifier les providers...');
        console.log(`üìç Destinataire: ${testEmail}`);
        
        try {
            const result = await courier.send({
                message: {
                    to: { email: testEmail },
                    content: {
                        title: "Test Status Provider",
                        body: "<p>Test de v√©rification du provider Courier</p>"
                    }
                }
            });

            console.log('\n‚úÖ ENVOI R√âUSSI:');
            console.log(`üìÆ Message ID: ${result.requestId}`);
            console.log('üéâ Un provider email est configur√© et fonctionnel !');
            
            // D√©lai pour laisser le temps au processing
            console.log('\n‚è±Ô∏è  Attente 10 secondes pour v√©rifier la d√©livrance...');
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            console.log('\nüìä RECOMMANDATIONS:');
            console.log('   1. V√©rifiez votre email (bo√Æte + spam)');
            console.log('   2. V√©rifiez les logs Courier: https://app.courier.com/logs');
            console.log('   3. Si pas re√ßu, le provider peut n√©cessiter une configuration');
            
            return { success: true, messageId: result.requestId };

        } catch (error) {
            console.log('\n‚ùå ERREUR LORS DE L\'ENVOI:');
            console.log(`   Type: ${error.name || 'Erreur inconnue'}`);
            console.log(`   Message: ${error.message}`);
            
            if (error.message.includes('No providers') || error.message.includes('NO_PROVIDERS')) {
                console.log('\nüîß DIAGNOSTIC: Provider non configur√©');
                console.log('   Solutions:');
                console.log('   1. Aller sur https://app.courier.com');
                console.log('   2. Settings ‚Üí Providers');
                console.log('   3. Ajouter un provider SMTP (Gmail recommand√©)');
                console.log('   4. Tester la connexion');
                console.log('\nüìã Configuration Gmail SMTP:');
                console.log('   ‚Ä¢ Host: smtp.gmail.com');
                console.log('   ‚Ä¢ Port: 587');
                console.log('   ‚Ä¢ Username: ndongoambassa7@gmail.com');
                console.log('   ‚Ä¢ Password: [mot de passe d\'application]');
                console.log('   ‚Ä¢ TLS: activ√©');
            }
            
            return { success: false, error: error.message };
        }

    } catch (error) {
        console.error('\n‚ùå Erreur de connexion Courier:', error.message);
        
        if (error.message.includes('Cannot find module')) {
            console.log('\nüí° Solution: npm install @trycourier/courier');
        }
        
        return { success: false, error: error.message };
    }
}

// Fonction pour tester apr√®s configuration
async function testAfterProviderConfig() {
    console.log('\nüß™ === TEST APR√àS CONFIGURATION PROVIDER ===\n');
    
    const emails = [
        'ndongoambassa7@gmail.com',
        'ndongojba@gmail.com'
    ];
    
    for (const email of emails) {
        console.log(`üìß Test avec ${email}...`);
        
        try {
            const { CourierClient } = require('@trycourier/courier');
            const courier = new CourierClient({ 
                authorizationToken: process.env.COURIER_AUTH_TOKEN 
            });
            
            const result = await courier.send({
                message: {
                    to: { email },
                    content: {
                        title: "‚úÖ KADOC - Provider Configur√© !",
                        body: `
                            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                                <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                                            color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                                    <h1 style="margin: 0; font-size: 28px;">üéâ KADOC</h1>
                                    <p style="margin: 10px 0 0 0; opacity: 0.9; font-size: 16px;">
                                        Provider Email Configur√© avec Succ√®s !
                                    </p>
                                </div>
                                
                                <div style="padding: 30px; background: white; border: 1px solid #e5e7eb;">
                                    <h2 style="color: #1f2937; margin-top: 0;">F√©licitations ! üöÄ</h2>
                                    
                                    <p style="color: #4b5563; font-size: 16px; line-height: 1.6;">
                                        Votre syst√®me email KADOC avec Courier est maintenant <strong>compl√®tement op√©rationnel</strong>.
                                    </p>
                                    
                                    <div style="background: #f0fdf4; border-left: 4px solid #10b981; padding: 20px; margin: 20px 0;">
                                        <h3 style="color: #166534; margin-top: 0; font-size: 16px;">‚ú® Syst√®me pr√™t :</h3>
                                        <ul style="color: #166534; margin: 10px 0;">
                                            <li>‚úÖ Provider email configur√©</li>
                                            <li>‚úÖ Templates HTML professionnels</li>
                                            <li>‚úÖ 10,000 emails gratuits/mois</li>
                                            <li>‚úÖ Int√©gration KADOC compl√®te</li>
                                        </ul>
                                    </div>
                                    
                                    <p style="color: #6b7280; font-size: 14px; margin: 20px 0 0 0;">
                                        üïí Email de test envoy√© le ${new Date().toLocaleString('fr-FR')}
                                    </p>
                                </div>
                            </div>
                        `
                    }
                }
            });
            
            console.log(`   ‚úÖ Succ√®s - ID: ${result.requestId}`);
            
        } catch (error) {
            console.log(`   ‚ùå Erreur: ${error.message}`);
        }
        
        // Pause entre les envois
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('\nüéØ Si vous recevez ces emails, votre configuration est parfaite !');
}

// Ex√©cution selon l'argument
if (process.argv.includes('--test-after-config')) {
    testAfterProviderConfig();
} else {
    checkCourierStatus();
}
