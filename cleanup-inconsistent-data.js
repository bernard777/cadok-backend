// Script de nettoyage des donn√©es incoh√©rentes
const mongoose = require('mongoose');

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/cadok';

// Mod√®les
const User = require('./models/User');
const Trade = require('./models/Trade');
const ObjectModel = require('./models/Object');
const Review = require('./models/Review');

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('üì¶ Connexion MongoDB √©tablie');
  } catch (error) {
    console.error('‚ùå Erreur connexion MongoDB:', error);
    process.exit(1);
  }
}

async function cleanupInconsistentTrades() {
  console.log('\nüîÑ Nettoyage des trades incoh√©rents...');
  
  try {
    // 1. Supprimer les trades avec des utilisateurs inexistants
    const allTrades = await Trade.find({});
    let deletedTrades = 0;
    
    for (const trade of allTrades) {
      let shouldDelete = false;
      
      // V√©rifier que les utilisateurs existent
      if (trade.requester) {
        const requesterExists = await User.findById(trade.requester);
        if (!requesterExists) {
          console.log(`‚ö†Ô∏è  Trade ${trade._id} - Requester ${trade.requester} inexistant`);
          shouldDelete = true;
        }
      } else {
        console.log(`‚ö†Ô∏è  Trade ${trade._id} - Pas de requester`);
        shouldDelete = true;
      }
      
      if (trade.owner) {
        const ownerExists = await User.findById(trade.owner);
        if (!ownerExists) {
          console.log(`‚ö†Ô∏è  Trade ${trade._id} - Owner ${trade.owner} inexistant`);
          shouldDelete = true;
        }
      } else {
        console.log(`‚ö†Ô∏è  Trade ${trade._id} - Pas d'owner`);
        shouldDelete = true;
      }
      
      // V√©rifier que les objets existent
      if (trade.requestedObjects && trade.requestedObjects.length > 0) {
        for (const objId of trade.requestedObjects) {
          const objExists = await ObjectModel.findById(objId);
          if (!objExists) {
            console.log(`‚ö†Ô∏è  Trade ${trade._id} - Objet demand√© ${objId} inexistant`);
            shouldDelete = true;
          }
        }
      }
      
      if (trade.offeredObjects && trade.offeredObjects.length > 0) {
        for (const objId of trade.offeredObjects) {
          const objExists = await ObjectModel.findById(objId);
          if (!objExists) {
            console.log(`‚ö†Ô∏è  Trade ${trade._id} - Objet offert ${objId} inexistant`);
            shouldDelete = true;
          }
        }
      }
      
      if (shouldDelete) {
        await Trade.findByIdAndDelete(trade._id);
        deletedTrades++;
        console.log(`üóëÔ∏è  Trade ${trade._id} supprim√©`);
      }
    }
    
    console.log(`‚úÖ ${deletedTrades} trades incoh√©rents supprim√©s`);
    return deletedTrades;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage trades:', error);
    return 0;
  }
}

async function cleanupInconsistentObjects() {
  console.log('\nüîÑ Nettoyage des objets incoh√©rents...');
  
  try {
    // Supprimer les objets avec des propri√©taires inexistants
    const allObjects = await ObjectModel.find({});
    let deletedObjects = 0;
    
    for (const obj of allObjects) {
      if (obj.owner) {
        const ownerExists = await User.findById(obj.owner);
        if (!ownerExists) {
          console.log(`‚ö†Ô∏è  Objet ${obj._id} - Owner ${obj.owner} inexistant`);
          await ObjectModel.findByIdAndDelete(obj._id);
          deletedObjects++;
          console.log(`üóëÔ∏è  Objet ${obj._id} supprim√©`);
        }
      } else {
        console.log(`‚ö†Ô∏è  Objet ${obj._id} - Pas d'owner`);
        await ObjectModel.findByIdAndDelete(obj._id);
        deletedObjects++;
        console.log(`üóëÔ∏è  Objet ${obj._id} supprim√©`);
      }
    }
    
    console.log(`‚úÖ ${deletedObjects} objets incoh√©rents supprim√©s`);
    return deletedObjects;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage objets:', error);
    return 0;
  }
}

async function cleanupInconsistentReviews() {
  console.log('\nüîÑ Nettoyage des avis incoh√©rents...');
  
  try {
    // Supprimer les reviews avec des utilisateurs ou trades inexistants
    const allReviews = await Review.find({});
    let deletedReviews = 0;
    
    for (const review of allReviews) {
      let shouldDelete = false;
      
      // V√©rifier reviewer
      if (review.reviewer) {
        const reviewerExists = await User.findById(review.reviewer);
        if (!reviewerExists) {
          console.log(`‚ö†Ô∏è  Review ${review._id} - Reviewer ${review.reviewer} inexistant`);
          shouldDelete = true;
        }
      } else {
        shouldDelete = true;
      }
      
      // V√©rifier reviewee
      if (review.reviewee) {
        const revieweeExists = await User.findById(review.reviewee);
        if (!revieweeExists) {
          console.log(`‚ö†Ô∏è  Review ${review._id} - Reviewee ${review.reviewee} inexistant`);
          shouldDelete = true;
        }
      } else {
        shouldDelete = true;
      }
      
      // V√©rifier trade
      if (review.trade) {
        const tradeExists = await Trade.findById(review.trade);
        if (!tradeExists) {
          console.log(`‚ö†Ô∏è  Review ${review._id} - Trade ${review.trade} inexistant`);
          shouldDelete = true;
        }
      } else {
        shouldDelete = true;
      }
      
      if (shouldDelete) {
        await Review.findByIdAndDelete(review._id);
        deletedReviews++;
        console.log(`üóëÔ∏è  Review ${review._id} supprim√©e`);
      }
    }
    
    console.log(`‚úÖ ${deletedReviews} avis incoh√©rents supprim√©s`);
    return deletedReviews;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage reviews:', error);
    return 0;
  }
}

async function generateCleanupReport() {
  console.log('\nüìä G√©n√©ration du rapport de nettoyage...');
  
  try {
    const stats = {
      users: await User.countDocuments(),
      trades: await Trade.countDocuments(),
      objects: await ObjectModel.countDocuments(),
      reviews: await Review.countDocuments()
    };
    
    console.log('\nüìà STATISTIQUES APR√àS NETTOYAGE:');
    console.log(`üë• Utilisateurs: ${stats.users}`);
    console.log(`üîÑ √âchanges: ${stats.trades}`);
    console.log(`üì¶ Objets: ${stats.objects}`);
    console.log(`‚≠ê Avis: ${stats.reviews}`);
    
    return stats;
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration rapport:', error);
    return null;
  }
}

async function main() {
  console.log('üßπ D√âMARRAGE DU NETTOYAGE DES DONN√âES INCOH√âRENTES');
  console.log('====================================================');
  
  await connectDB();
  
  let totalCleaned = 0;
  
  // Nettoyage des diff√©rentes collections (dans l'ordre)
  totalCleaned += await cleanupInconsistentReviews(); // D'abord les reviews (d√©pendent des trades)
  totalCleaned += await cleanupInconsistentTrades();   // Puis les trades (d√©pendent des users/objects)
  totalCleaned += await cleanupInconsistentObjects();  // Enfin les objets (d√©pendent des users)
  
  // Rapport final
  await generateCleanupReport();
  
  console.log('\nüéØ R√âSULTATS DU NETTOYAGE:');
  console.log(`‚úÖ Total d'√©l√©ments incoh√©rents supprim√©s: ${totalCleaned}`);
  
  if (totalCleaned === 0) {
    console.log('üéâ Aucun √©l√©ment incoh√©rent trouv√© - Base de donn√©es propre !');
  } else {
    console.log('üéâ Nettoyage termin√© avec succ√®s !');
    console.log('üí° Red√©marrez les serveurs pour voir les changements');
  }
  
  await mongoose.connection.close();
  console.log('üì¶ Connexion MongoDB ferm√©e');
}

// Ex√©cution du script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { main, cleanupInconsistentTrades, cleanupInconsistentObjects, cleanupInconsistentReviews };
