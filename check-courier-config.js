/**
 * V√âRIFICATION AUTOMATIQUE - CONFIGURATION COURIER
 * ==============================================
 * 
 * Script qui v√©rifie que votre configuration Courier est correcte
 */

require('dotenv').config();

function checkCourierConfiguration() {
    console.log('üîç === V√âRIFICATION CONFIGURATION COURIER ===\n');

    const checks = [];
    let allGood = true;

    // V√©rification 1: Variables d'environnement
    console.log('üìã 1. V√©rification variables d\'environnement...');
    
    const requiredEnvs = {
        'COURIER_AUTH_TOKEN': 'Cl√© API Courier',
        'EMAIL_FROM_ADDRESS': 'Adresse exp√©diteur',
        'EMAIL_FROM_NAME': 'Nom exp√©diteur'
    };

    for (const [env, description] of Object.entries(requiredEnvs)) {
        if (process.env[env]) {
            console.log(`   ‚úÖ ${env}: ${description} configur√©`);
            checks.push({ name: description, status: 'OK', details: 'Pr√©sent' });
        } else {
            console.log(`   ‚ùå ${env}: ${description} MANQUANT`);
            checks.push({ name: description, status: 'ERREUR', details: 'Manquant dans .env' });
            allGood = false;
        }
    }

    // V√©rification 2: Format de la cl√© API
    console.log('\nüîë 2. V√©rification format cl√© API...');
    
    const token = process.env.COURIER_AUTH_TOKEN;
    if (token) {
        if (token.startsWith('pk_prod_')) {
            console.log('   ‚úÖ Cl√© de production d√©tect√©e');
            checks.push({ name: 'Format cl√© API', status: 'OK', details: 'Cl√© de production' });
        } else if (token.startsWith('pk_test_')) {
            console.log('   ‚ö†Ô∏è  Cl√© de test d√©tect√©e (OK pour d√©veloppement)');
            checks.push({ name: 'Format cl√© API', status: 'ATTENTION', details: 'Cl√© de test' });
        } else if (token === 'pk_prod_VOTRE_TOKEN_COURIER_ICI') {
            console.log('   ‚ùå Cl√© placeholder d√©tect√©e - Remplacez par votre vraie cl√© !');
            console.log('   üí° Prendre la cl√© "Untitled key (published)" dans Courier');
            checks.push({ name: 'Format cl√© API', status: 'ERREUR', details: 'Placeholder non remplac√©' });
            allGood = false;
        } else {
            console.log('   ‚ùå Format de cl√© non reconnu');
            console.log('   üí° V√©rifiez que vous avez pris la cl√© "published" (pas "draft")');
            checks.push({ name: 'Format cl√© API', status: 'ERREUR', details: 'Format invalide' });
            allGood = false;
        }
        
        // V√©rification longueur (les cl√©s Courier font g√©n√©ralement 32+ caract√®res)
        if (token.length < 20) {
            console.log('   ‚ö†Ô∏è  Cl√© tr√®s courte - V√©rifiez qu\'elle est compl√®te');
            checks.push({ name: 'Longueur cl√© API', status: 'ATTENTION', details: 'Cl√© tronqu√©e ?' });
        }
    }

    // V√©rification 3: Package Courier install√©
    console.log('\nüì¶ 3. V√©rification package Courier...');
    
    try {
        require('@trycourier/courier');
        console.log('   ‚úÖ Package @trycourier/courier install√©');
        checks.push({ name: 'Package Courier', status: 'OK', details: 'Install√©' });
    } catch (error) {
        console.log('   ‚ùå Package @trycourier/courier manquant');
        console.log('   üí° Installation: npm install @trycourier/courier');
        checks.push({ name: 'Package Courier', status: 'ERREUR', details: 'Pas install√©' });
        allGood = false;
    }

    // V√©rification 4: Service Email
    console.log('\nüéØ 4. V√©rification service email...');
    
    try {
        const CourierEmailService = require('./services/CourierEmailService');
        console.log('   ‚úÖ Service Courier import√© avec succ√®s');
        checks.push({ name: 'Service Email', status: 'OK', details: 'Import√©' });
    } catch (error) {
        console.log('   ‚ùå Erreur import service:', error.message);
        checks.push({ name: 'Service Email', status: 'ERREUR', details: error.message });
        allGood = false;
    }

    // V√©rification 5: Configuration Email Provider
    console.log('\nüìß 5. V√©rification provider email...');
    
    const provider = process.env.EMAIL_PROVIDER;
    if (provider === 'courier') {
        console.log('   ‚úÖ Provider configur√© sur Courier');
        checks.push({ name: 'Email Provider', status: 'OK', details: 'Courier s√©lectionn√©' });
    } else if (provider === 'gmail') {
        console.log('   ‚ö†Ô∏è  Provider configur√© sur Gmail (backup)');
        checks.push({ name: 'Email Provider', status: 'ATTENTION', details: 'Gmail actif au lieu de Courier' });
    } else {
        console.log('   ‚ùå Provider non d√©fini ou invalide');
        checks.push({ name: 'Email Provider', status: 'ERREUR', details: 'Non configur√©' });
        allGood = false;
    }

    // R√©sum√©
    console.log('\n' + '='.repeat(50));
    console.log('üìä R√âSUM√â DE LA V√âRIFICATION');
    console.log('='.repeat(50));

    checks.forEach(check => {
        const statusIcon = check.status === 'OK' ? '‚úÖ' : 
                          check.status === 'ATTENTION' ? '‚ö†Ô∏è' : '‚ùå';
        console.log(`${statusIcon} ${check.name}: ${check.details}`);
    });

    console.log('\n' + '='.repeat(50));

    if (allGood) {
        console.log('üéâ CONFIGURATION PARFAITE !');
        console.log('‚úÖ Tous les √©l√©ments sont correctement configur√©s');
        console.log('üöÄ Vous pouvez maintenant envoyer des emails via Courier');
        console.log('\nüí° Prochaine √©tape: node test-courier-email.js');
    } else {
        console.log('‚ö†Ô∏è  CONFIGURATION INCOMPL√àTE');
        console.log('‚ùå Certains √©l√©ments n√©cessitent votre attention');
        console.log('\nüîß Actions recommand√©es:');
        
        if (checks.some(c => c.name === 'Cl√© API Courier' && c.status === 'ERREUR')) {
            console.log('1. üîë Configurer votre cl√© Courier dans .env');
            console.log('   ‚Üí Aller sur https://app.courier.com/');
            console.log('   ‚Üí Settings > API Keys');
            console.log('   ‚Üí Copier la cl√© "Untitled key (PUBLISHED)" ‚Üê Important !');
            console.log('   ‚Üí PAS la cl√© "draft" ‚ùå');
        }
        
        if (checks.some(c => c.name === 'Package Courier' && c.status === 'ERREUR')) {
            console.log('2. üì¶ Installer le package:');
            console.log('   ‚Üí npm install @trycourier/courier');
        }
        
        if (checks.some(c => c.name === 'Email Provider' && c.status === 'ERREUR')) {
            console.log('3. ‚öôÔ∏è  Configurer EMAIL_PROVIDER=courier dans .env');
        }
    }

    console.log('\nüìö Aide compl√®te: GUIDE_SETUP_COURIER_DETAILLE.md');
    console.log('üåê Guide visuel: guide-visual-courier.html');

    return allGood;
}

// Ex√©cution si appel√© directement
if (require.main === module) {
    checkCourierConfiguration();
}

module.exports = { checkCourierConfiguration };
