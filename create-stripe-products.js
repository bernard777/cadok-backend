require('dotenv').config();

const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

console.log('üèóÔ∏è  CR√âATION DES PRODUITS ET PRIX STRIPE');
console.log('=========================================\n');

async function createStripeProducts() {
  try {
    // D√©finition des plans Cadok
    const plans = [
      {
        id: 'basic',
        name: 'Plan Basic Cadok',
        description: '10 objets maximum, 5 √©changes maximum, Support prioritaire, Recherche avanc√©e',
        price: 2, // 2‚Ç¨
        currency: 'eur',
        interval: 'month'
      },
      {
        id: 'premium',
        name: 'Plan Premium Cadok',
        description: 'Objets illimit√©s, √âchanges illimit√©s, Support prioritaire 24/7, Recherche avanc√©e',
        price: 5, // 5‚Ç¨
        currency: 'eur',
        interval: 'month'
      }
    ];

    console.log('üì¶ Cr√©ation des produits et prix...\n');

    const createdPlans = {};

    for (const plan of plans) {
      console.log(`üîß Cr√©ation du plan ${plan.name}...`);

      // 1. Cr√©er le produit
      const product = await stripe.products.create({
        name: plan.name,
        description: plan.description,
        metadata: {
          plan_id: plan.id,
          app: 'cadok'
        }
      });

      console.log(`   ‚úÖ Produit cr√©√©: ${product.id}`);

      // 2. Cr√©er le prix
      const price = await stripe.prices.create({
        product: product.id,
        unit_amount: plan.price * 100, // Convertir en centimes
        currency: plan.currency,
        recurring: {
          interval: plan.interval
        },
        metadata: {
          plan_id: plan.id,
          app: 'cadok'
        }
      });

      console.log(`   ‚úÖ Prix cr√©√©: ${price.id}`);
      console.log(`   üí∞ Montant: ${plan.price}‚Ç¨/${plan.interval}`);

      createdPlans[plan.id] = {
        product_id: product.id,
        price_id: price.id,
        amount: plan.price
      };

      console.log('');
    }

    // 3. Afficher le r√©sum√© et les IDs √† copier
    console.log('üéâ CR√âATION TERMIN√âE AVEC SUCC√àS !\n');
    
    console.log('üìã COPIEZ CES IDS DANS VOTRE .ENV :\n');
    console.log('# ID des prix des plans Stripe');
    console.log(`STRIPE_BASIC_PRICE_ID=${createdPlans.basic.price_id}`);
    console.log(`STRIPE_PREMIUM_PRICE_ID=${createdPlans.premium.price_id}`);
    
    console.log('\nüìä R√âSUM√â DES PLANS CR√â√âS :');
    console.log('============================');
    for (const [planId, data] of Object.entries(createdPlans)) {
      console.log(`\n${planId.toUpperCase()} PLAN:`);
      console.log(`   Produit ID: ${data.product_id}`);
      console.log(`   Prix ID: ${data.price_id}`);
      console.log(`   Montant: ${data.amount}‚Ç¨/mois`);
    }

    console.log('\nüîó LIENS UTILES :');
    console.log(`Dashboard Stripe: https://dashboard.stripe.com/test/products`);
    console.log(`API Documentation: https://stripe.com/docs/api/products`);

    // 4. Mettre √† jour automatiquement le fichier .env
    await updateEnvFile(createdPlans);

  } catch (error) {
    console.error('\n‚ùå ERREUR lors de la cr√©ation :', error.message);
    
    if (error.code === 'resource_already_exists') {
      console.log('\nüí° Il semble que des produits existent d√©j√†.');
      console.log('   Voulez-vous lister les produits existants ? Ex√©cutez : node list-stripe-products.js');
    }
  }
}

async function updateEnvFile(plans) {
  try {
    const fs = require('fs');
    const path = require('path');
    
    const envPath = path.join(__dirname, '.env');
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // Remplacer les lignes des price IDs
    envContent = envContent.replace(
      /STRIPE_BASIC_PRICE_ID=.*/,
      `STRIPE_BASIC_PRICE_ID=${plans.basic.price_id}`
    );
    
    envContent = envContent.replace(
      /STRIPE_PREMIUM_PRICE_ID=.*/,
      `STRIPE_PREMIUM_PRICE_ID=${plans.premium.price_id}`
    );
    
    fs.writeFileSync(envPath, envContent);
    
    console.log('\nüîÑ Fichier .env mis √† jour automatiquement !');
    console.log('‚úÖ Les nouveaux Price IDs ont √©t√© ajout√©s');
    
  } catch (error) {
    console.error('‚ö†Ô∏è  Impossible de mettre √† jour le .env automatiquement :', error.message);
    console.log('üí° Copiez-collez manuellement les IDs ci-dessus dans votre fichier .env');
  }
}

// Fonction pour v√©rifier si des produits existent d√©j√†
async function checkExistingProducts() {
  try {
    const products = await stripe.products.list({ limit: 10 });
    
    if (products.data.length > 0) {
      console.log('üì¶ Produits existants trouv√©s :');
      products.data.forEach(product => {
        console.log(`   - ${product.name} (${product.id})`);
      });
      console.log('\n‚ùì Voulez-vous cr√©er de nouveaux produits ou utiliser les existants ?');
      console.log('üí° Pour lister les prix existants : node list-stripe-products.js');
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
}

// Ex√©cution
console.log('üîç V√©rification des produits existants...\n');
checkExistingProducts()
  .then(hasExisting => {
    if (!hasExisting) {
      console.log('‚û°Ô∏è  Aucun produit existant. Cr√©ation des nouveaux plans...\n');
      return createStripeProducts();
    } else {
      console.log('\n‚ùì Tapez "y" pour cr√©er de nouveaux produits quand m√™me :');
      // Pour ce script, on continue la cr√©ation
      return createStripeProducts();
    }
  })
  .catch(console.error);
