/**
 * üé™ MIDDLEWARE DE VALIDATION √âV√âNEMENTS - CADOK
 * Validation et s√©curit√© pour les op√©rations sur les √©v√©nements
 */

const Event = require('../models/Event');

/**
 * üîí Middleware pour emp√™cher les inscriptions multiples
 * V√©rifie si l'utilisateur participe d√©j√† √† un √©v√©nement
 */
const preventDuplicateParticipation = async (req, res, next) => {
  try {
    const { eventId } = req.params;
    const userId = req.user.id;
    
    console.log(`[VALIDATION] V√©rification inscription multiple - User: ${userId}, Event: ${eventId}`);
    
    const event = await Event.findById(eventId);
    if (!event) {
      return res.status(404).json({
        success: false,
        error: '√âv√©nement non trouv√©',
        code: 'EVENT_NOT_FOUND'
      });
    }
    
    // V√©rifier si l'utilisateur participe d√©j√†
    const existingParticipant = event.participants.find(
      participant => participant.userId.toString() === userId.toString()
    );
    
    if (existingParticipant) {
      console.log(`[VALIDATION BLOCKED] Inscription multiple tent√©e par ${userId} pour l'√©v√©nement ${eventId}`);
      return res.status(409).json({
        success: false,
        error: 'Vous participez d√©j√† √† cet √©v√©nement',
        code: 'ALREADY_PARTICIPATING',
        participation: {
          joinedAt: existingParticipant.joinedAt,
          progress: existingParticipant.progress
        }
      });
    }
    
    // Ajouter l'√©v√©nement aux donn√©es de la requ√™te pour √©viter une requ√™te suppl√©mentaire
    req.event = event;
    next();
    
  } catch (error) {
    console.error('[VALIDATION ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Erreur de validation',
      code: 'VALIDATION_ERROR'
    });
  }
};

/**
 * ‚è∞ Middleware pour v√©rifier si un √©v√©nement est dans sa p√©riode active
 */
const validateEventTiming = async (req, res, next) => {
  try {
    // Si l'√©v√©nement est d√©j√† dans req (via preventDuplicateParticipation)
    const event = req.event || await Event.findById(req.params.eventId);
    
    if (!event) {
      return res.status(404).json({
        success: false,
        error: '√âv√©nement non trouv√©',
        code: 'EVENT_NOT_FOUND'
      });
    }
    
    const now = new Date();
    
    // V√©rifier si l'√©v√©nement est actif
    if (!event.isActive) {
      return res.status(403).json({
        success: false,
        error: 'Cet √©v√©nement n\'est pas actif',
        code: 'EVENT_NOT_ACTIVE'
      });
    }
    
    // V√©rifier si l'√©v√©nement a commenc√©
    if (now < event.startDate) {
      return res.status(403).json({
        success: false,
        error: 'Cet √©v√©nement n\'a pas encore commenc√©',
        code: 'EVENT_NOT_STARTED',
        startDate: event.startDate
      });
    }
    
    // V√©rifier si l'√©v√©nement n'est pas termin√©
    if (now > event.endDate) {
      return res.status(410).json({
        success: false,
        error: 'Cet √©v√©nement est termin√©',
        code: 'EVENT_ENDED',
        endDate: event.endDate
      });
    }
    
    req.event = event;
    next();
    
  } catch (error) {
    console.error('[TIMING VALIDATION ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Erreur de validation temporelle',
      code: 'TIMING_VALIDATION_ERROR'
    });
  }
};

/**
 * üë§ Middleware pour v√©rifier que l'utilisateur participe √† un √©v√©nement
 * Utilis√© pour les actions qui n√©cessitent une participation (compl√©ter des d√©fis, etc.)
 */
const requireEventParticipation = async (req, res, next) => {
  try {
    const { eventId } = req.params;
    const userId = req.user.id;
    
    const event = req.event || await Event.findById(eventId);
    
    if (!event) {
      return res.status(404).json({
        success: false,
        error: '√âv√©nement non trouv√©',
        code: 'EVENT_NOT_FOUND'
      });
    }
    
    const participant = event.participants.find(
      p => p.userId.toString() === userId.toString()
    );
    
    if (!participant) {
      return res.status(403).json({
        success: false,
        error: 'Vous devez participer √† cet √©v√©nement pour effectuer cette action',
        code: 'PARTICIPATION_REQUIRED'
      });
    }
    
    // Ajouter les informations de participation √† la requ√™te
    req.event = event;
    req.participation = participant;
    next();
    
  } catch (error) {
    console.error('[PARTICIPATION VALIDATION ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Erreur de validation de participation',
      code: 'PARTICIPATION_VALIDATION_ERROR'
    });
  }
};

/**
 * üìä Middleware pour enregistrer les tentatives d'inscriptions multiples (analytics)
 */
const logDuplicateAttempts = async (req, res, next) => {
  const originalJson = res.json;
  
  res.json = function(data) {
    // Si c'est une tentative d'inscription multiple, l'enregistrer
    if (data && !data.success && data.code === 'ALREADY_PARTICIPATING') {
      console.log(`[ANALYTICS] Tentative d'inscription multiple - User: ${req.user.id}, Event: ${req.params.eventId}, Time: ${new Date().toISOString()}`);
      
      // Ici on pourrait envoyer vers un syst√®me d'analytics
      // ou incr√©menter un compteur dans la base de donn√©es
    }
    
    return originalJson.call(this, data);
  };
  
  next();
};

/**
 * üéØ Validation compl√®te pour inscription aux √©v√©nements
 * Combine toutes les validations n√©cessaires
 */
const validateEventParticipation = [
  logDuplicateAttempts,
  preventDuplicateParticipation,
  validateEventTiming
];

module.exports = {
  preventDuplicateParticipation,
  validateEventTiming,
  requireEventParticipation,
  logDuplicateAttempts,
  validateEventParticipation
};
