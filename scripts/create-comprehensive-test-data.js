/**
 * üöÄ SCRIPT COMPLET DE CR√âATION DE DONN√âES DE TEST - CADOK PRODUCTION
 * Cr√©ation d'utilisateurs, objets et √©changes coh√©rents avec le syst√®me actuel
 * 
 * Fonctionnalit√©s :
 * - Utilisateur super admin avec email sp√©cifi√©
 * - Utilisateurs de test r√©alistes avec diff√©rents statuts
 * - Objets vari√©s avec g√©olocalisation
 * - √âchanges dans tous les √©tats possibles
 * - Syst√®me d'√©valuations et signalements
 * - Compatible avec le syst√®me de s√©curit√© et livraisons
 */

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Mod√®les
const User = require('../models/User');
const ObjectModel = require('../models/Object');
const Trade = require('../models/Trade');
const Category = require('../models/Category');
const Report = require('../models/Report');

// Configuration
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/cadok_database';

/**
 * ü¶∏‚Äç‚ôÇÔ∏è CR√âATION DU SUPER ADMIN
 */
async function createSuperAdmin() {
  console.log('ü¶∏‚Äç‚ôÇÔ∏è Cr√©ation du Super Admin...');
  
  const superAdminEmail = 'ndongoambassa7@gmail.com';
  
  // V√©rifier si le super admin existe d√©j√†
  const existingAdmin = await User.findOne({ email: superAdminEmail });
  if (existingAdmin) {
    console.log(`‚úÖ Super Admin ${superAdminEmail} existe d√©j√†`);
    return existingAdmin;
  }

  const hashedPassword = await bcrypt.hash('SuperAdmin2024!', 12);
  
  const superAdmin = new User({
    pseudo: 'SuperAdminKadoc',
    email: superAdminEmail,
    password: hashedPassword,
    firstName: 'Super',
    lastName: 'Administrateur',
    phoneNumber: '+33612345678',
    city: 'Nantes',
    address: {
      street: '1 Avenue des Administrateurs',
      zipCode: '44000',
      city: 'Nantes',
      country: 'France',
      additionalInfo: 'Centre de commande CADOK',
      isDefault: true,
      coordinates: [-1.5534, 47.2184], // Nantes
      precision: 'exact'
    },
    dateOfBirth: new Date('1985-01-01'),
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    
    // üõ°Ô∏è PERMISSIONS MAXIMALES
    role: 'super_admin',
    isAdmin: true,
    adminPermissions: {
      manageEvents: true,
      createEvents: true,
      moderateEvents: true,
      manageUsers: true,
      banUsers: true,
      viewUserDetails: true,
      manageTrades: true,
      approveTrades: true,
      resolveDisputes: true,
      moderateContent: true,
      deleteReports: true,
      manageReports: true,
      viewAnalytics: true,
      systemConfig: true,
      manageAdmins: true
    },
    adminActivatedAt: new Date(),
    
    subscriptionPlan: 'premium',
    subscriptionStatus: 'active',
    subscriptionEndDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 an
    
    profile: {
      bio: 'Super Administrateur CADOK - Responsable de la plateforme et de la communaut√©.',
      interests: ['Administration', 'S√©curit√©', 'D√©veloppement'],
      preferredCategories: []
    },
    
    tradeStats: {
      totalTrades: 50,
      completedTrades: 45,
      successRate: 90,
      avgRating: 4.9,
      totalRatings: 25
    },
    
    createdAt: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000), // Cr√©√© il y a 1 an
    lastLoginAt: new Date()
  });

  await superAdmin.save();
  console.log(`‚úÖ Super Admin cr√©√©: ${superAdminEmail}`);
  console.log(`üîë Mot de passe: SuperAdmin2024!`);
  
  return superAdmin;
}

/**
 * üë• UTILISATEURS DE TEST DIVERSIFI√âS
 */
const testUsersData = [
  {
    pseudo: 'MarieCollectionneuse',
    email: 'marie.test@cadok.app',
    password: 'Marie2024!',
    firstName: 'Marie',
    lastName: 'Lambert',
    phoneNumber: '+33645123789',
    city: 'Paris',
    address: {
      street: '15 Rue de la R√©publique',
      zipCode: '75010',
      city: 'Paris',
      country: 'France',
      additionalInfo: '3√®me √©tage',
      isDefault: true,
      coordinates: [2.3522, 48.8566],
      precision: 'approximate'
    },
    dateOfBirth: new Date('1992-03-15'),
    subscriptionPlan: 'premium',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    role: 'user',
    profile: {
      bio: 'Passionn√©e de vintage et de mode durable. J\'aime donner une seconde vie aux objets.',
      interests: ['Mode', 'Vintage', 'Art'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'TechLover_Alex',
    email: 'alex.tech@cadok.app',
    password: 'Tech2024!',
    firstName: 'Alexandre',
    lastName: 'Martin',
    phoneNumber: '+33756234891',
    city: 'Lyon',
    address: {
      street: '42 Avenue de la Technologie',
      zipCode: '69003',
      city: 'Lyon',
      country: 'France',
      additionalInfo: 'Appartement B12',
      isDefault: true,
      coordinates: [4.8357, 45.7640],
      precision: 'exact'
    },
    dateOfBirth: new Date('1988-07-22'),
    subscriptionPlan: 'basic',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    role: 'user',
    profile: {
      bio: 'Ing√©nieur informatique, amateur de high-tech et de gadgets.',
      interests: ['Technologie', 'Gaming', 'Innovation'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'ClaraBookworm',
    email: 'clara.books@cadok.app',
    password: 'Books2024!',
    firstName: 'Clara',
    lastName: 'Dubois',
    phoneNumber: '+33634567123',
    city: 'Bordeaux',
    address: {
      street: '8 Rue des Livres',
      zipCode: '33000',
      city: 'Bordeaux',
      country: 'France',
      additionalInfo: 'Rez-de-chauss√©e',
      isDefault: true,
      coordinates: [-0.5792, 44.8378],
      precision: 'approximate'
    },
    dateOfBirth: new Date('1995-11-08'),
    subscriptionPlan: 'premium',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    role: 'moderator',
    isAdmin: true,
    adminPermissions: {
      moderateContent: true,
      manageReports: true,
      viewAnalytics: true
    },
    profile: {
      bio: 'Mod√©ratrice et biblioth√©caire. Mon appartement d√©borde de livres que je partage avec plaisir.',
      interests: ['Litt√©rature', 'Histoire', 'Philosophie'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'JulienBricoleur',
    email: 'julien.bricoleur@cadok.app',
    password: 'Bricolage2024!',
    firstName: 'Julien',
    lastName: 'Moreau',
    phoneNumber: '+33698765432',
    city: 'Toulouse',
    address: {
      street: '25 All√©e des Artisans',
      zipCode: '31000',
      city: 'Toulouse',
      country: 'France',
      additionalInfo: 'Atelier au fond de la cour',
      isDefault: true,
      coordinates: [1.4442, 43.6047],
      precision: 'exact'
    },
    dateOfBirth: new Date('1985-05-12'),
    subscriptionPlan: 'basic',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: false, // T√©l√©phone non v√©rifi√© pour test
    role: 'user',
    profile: {
      bio: 'Artisan menuisier, je cr√©e et r√©pare tout ce qui est en bois.',
      interests: ['Bricolage', 'Artisanat', 'Jardinage'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'SophieFitness',
    email: 'sophie.sport@cadok.app',
    password: 'Sport2024!',
    firstName: 'Sophie',
    lastName: 'Garcia',
    phoneNumber: '+33623456789',
    city: 'Nice',
    address: {
      street: '12 Boulevard du Sport',
      zipCode: '06100',
      city: 'Nice',
      country: 'France',
      additionalInfo: '2√®me √©tage',
      isDefault: true,
      coordinates: [7.2619, 43.7102],
      precision: 'approximate'
    },
    dateOfBirth: new Date('1990-09-25'),
    subscriptionPlan: 'premium',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    role: 'user',
    profile: {
      bio: 'Coach sportive, je pr√¥ne un mode de vie sain et actif.',
      interests: ['Sport', 'Bien-√™tre', 'Nutrition'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'MarkusCollector',
    email: 'markus.collector@cadok.app',
    password: 'Collection2024!',
    firstName: 'Markus',
    lastName: 'Schmidt',
    phoneNumber: '+33687654321',
    city: 'Strasbourg',
    address: {
      street: '7 Place des Antiquit√©s',
      zipCode: '67000',
      city: 'Strasbourg',
      country: 'France',
      additionalInfo: 'Maison particuli√®re',
      isDefault: true,
      coordinates: [7.7521, 48.5734],
      precision: 'city_only'
    },
    dateOfBirth: new Date('1983-12-03'),
    subscriptionPlan: 'basic',
    subscriptionStatus: 'inactive', // Abonnement expir√© pour test
    verified: false, // Non v√©rifi√© pour test
    emailVerified: true,
    phoneVerified: false,
    role: 'user',
    profile: {
      bio: 'Collectionneur d\'objets vintage et d\'antiquit√©s.',
      interests: ['Antiquit√©s', 'Histoire', 'Collection'],
      preferredCategories: []
    }
  },
  {
    pseudo: 'EmmaCreative',
    email: 'emma.creative@cadok.app',
    password: 'Creative2024!',
    firstName: 'Emma',
    lastName: 'Rousseau',
    phoneNumber: '+33612987654',
    city: 'Rennes',
    address: {
      street: '9 Rue de l\'Art',
      zipCode: '35000',
      city: 'Rennes',
      country: 'France',
      additionalInfo: 'Atelier cr√©atif',
      isDefault: true,
      coordinates: [-1.6778, 48.1173],
      precision: 'exact'
    },
    dateOfBirth: new Date('1993-06-18'),
    subscriptionPlan: 'premium',
    subscriptionStatus: 'active',
    verified: true,
    emailVerified: true,
    phoneVerified: true,
    role: 'user',
    profile: {
      bio: 'Artiste et cr√©atrice, j\'adore les projets DIY et l\'upcycling.',
      interests: ['Art', 'DIY', '√âcologie'],
      preferredCategories: []
    }
  }
];

/**
 * üì¶ OBJETS R√âALISTES PAR UTILISATEUR
 */
const objectsData = [
  // Objets du Super Admin
  {
    userIndex: 0, // Super Admin
    objects: [
      {
        title: 'Guide d\'utilisation CADOK Premium',
        description: 'Guide complet pour maximiser votre exp√©rience CADOK. Conseils, astuces et bonnes pratiques.',
        category: 'Livres & BD',
        condition: 'Neuf',
        tags: ['guide', 'CADOK', 'premium', 'conseils']
      },
      {
        title: 'Kit de d√©marrage √âcologique',
        description: 'Kit complet pour d√©buter dans l\'√©conomie circulaire : sacs r√©utilisables, contenants, guides.',
        category: 'Maison & D√©coration',
        condition: 'Neuf',
        tags: ['√©cologie', 'starter', 'r√©utilisable', 'environnement']
      }
    ]
  },
  // Objets de Marie (Mode/Vintage)
  {
    userIndex: 1,
    objects: [
      {
        title: 'Robe vintage ann√©es 70',
        description: 'Magnifique robe en parfait √©tat, taille 38. Style boh√®me chic des ann√©es 70 avec motifs floraux.',
        category: 'V√™tements & Mode',
        condition: 'Tr√®s bon √©tat',
        tags: ['vintage', 'robe', 'boh√®me', '70s', 'taille38']
      },
      {
        title: 'Sac √† main en cuir vintage',
        description: 'Sac en cuir v√©ritable, fabrication fran√ßaise. Quelques marques d\'usage qui lui donnent du caract√®re.',
        category: 'Bagagerie & Maroquinerie',
        condition: 'Bon √©tat',
        tags: ['vintage', 'cuir', 'sac', 'fran√ßais', 'authentique']
      },
      {
        title: 'Collier en perles de culture',
        description: 'Magnifique collier en perles de culture avec fermoir en argent. H√©ritage familial.',
        category: 'Bijoux & Montres',
        condition: 'Excellent √©tat',
        tags: ['perles', 'culture', 'argent', 'bijou', 'h√©ritage']
      }
    ]
  },
  // Objets d'Alexandre (Tech)
  {
    userIndex: 2,
    objects: [
      {
        title: 'iPhone 13 Pro 256GB',
        description: 'iPhone 13 Pro en excellent √©tat, √©cran impeccable. Batterie √† 91%. Avec chargeur, c√¢ble et coque.',
        category: '√âlectronique',
        condition: 'Excellent √©tat',
        tags: ['iPhone', 'smartphone', 'Apple', '256GB', 'complet']
      },
      {
        title: 'MacBook Air M2 2022',
        description: 'MacBook Air M2 16GB RAM, 512GB SSD. Utilis√© pour d√©veloppement, tr√®s bien entretenu. Garantie restante.',
        category: 'Mat√©riel Informatique',
        condition: 'Tr√®s bon √©tat',
        tags: ['MacBook', 'Apple', 'M2', 'd√©veloppement', '16GB', '512GB']
      },
      {
        title: 'Casque Sony WH-1000XM4',
        description: 'Casque audio haut de gamme avec r√©duction de bruit active. Parfait pour t√©l√©travail et musique.',
        category: '√âlectronique',
        condition: 'Excellent √©tat',
        tags: ['Sony', 'casque', 'noise-cancelling', 'bluetooth', 'premium']
      }
    ]
  },
  // Objets de Clara (Livres)
  {
    userIndex: 3,
    objects: [
      {
        title: 'Collection Harry Potter compl√®te',
        description: 'Les 7 tomes de Harry Potter en fran√ßais, √©ditions Gallimard. Tr√®s bon √©tat, quelques marques de lecture.',
        category: 'Livres & BD',
        condition: 'Tr√®s bon √©tat',
        tags: ['Harry Potter', 'collection', 'Gallimard', 'fantasy', 'complet']
      },
      {
        title: 'Encyclop√©die Universalis (20 volumes)',
        description: 'Encyclop√©die compl√®te en 20 volumes, √©dition 2018. Parfait pour recherches et culture g√©n√©rale.',
        category: 'Livres & BD',
        condition: 'Bon √©tat',
        tags: ['encyclop√©die', 'r√©f√©rence', 'culture', 'Universalis', '2018']
      }
    ]
  },
  // Objets de Julien (Bricolage)
  {
    userIndex: 4,
    objects: [
      {
        title: 'Perceuse-visseuse Bosch Professional',
        description: 'Perceuse-visseuse 18V avec 2 batteries et chargeur. Parfait √©tat de fonctionnement, peu utilis√©e.',
        category: 'Bricolage & Outillage',
        condition: 'Excellent √©tat',
        tags: ['Bosch', 'perceuse', 'professionnel', '18V', '2batteries']
      },
      {
        title: '√âtabli en bois massif',
        description: '√âtabli de menuisier traditionnel en h√™tre massif. Fabriqu√© artisanalement, tr√®s stable.',
        category: 'Bricolage & Outillage',
        condition: 'Bon √©tat',
        tags: ['√©tabli', 'menuiserie', 'h√™tre', 'artisanal', 'massif']
      }
    ]
  },
  // Objets de Sophie (Sport)
  {
    userIndex: 5,
    objects: [
      {
        title: 'V√©lo elliptique NordicTrack',
        description: 'V√©lo elliptique professionnel, 24 niveaux de r√©sistance, √©cran connect√©. Excellent √©tat.',
        category: 'Sports & Loisirs',
        condition: 'Excellent √©tat',
        tags: ['elliptique', 'NordicTrack', 'cardio', 'fitness', '24niveaux']
      },
      {
        title: 'Set d\'halt√®res ajustables 50kg',
        description: 'Paire d\'halt√®res ajustables de 2,5kg √† 25kg chacun. Parfait pour entra√Ænement √† domicile.',
        category: 'Sports & Loisirs',
        condition: 'Tr√®s bon √©tat',
        tags: ['halt√®res', 'musculation', 'ajustable', '50kg', 'domicile']
      }
    ]
  },
  // Objets de Markus (Collection)
  {
    userIndex: 6,
    objects: [
      {
        title: 'Montre m√©canique Omega 1965',
        description: 'Montre m√©canique Omega des ann√©es 60, mouvement manuel. R√©vis√©e r√©cemment, fonctionne parfaitement.',
        category: 'Art & Objets de Collection',
        condition: 'Excellent √©tat',
        tags: ['vintage', 'montre', 'Omega', 'm√©canique', '1965']
      },
      {
        title: 'Appareil photo Leica M6',
        description: 'L√©gendaire Leica M6 avec objectif 50mm Summicron. √âtat de collection, tout fonctionne parfaitement.',
        category: 'Art & Objets de Collection',
        condition: 'Excellent √©tat',
        tags: ['Leica', 'argentique', 'M6', 'collection', 'Summicron']
      }
    ]
  },
  // Objets d'Emma (Cr√©atif)
  {
    userIndex: 7,
    objects: [
      {
        title: 'Machine √† coudre Singer Vintage',
        description: 'Machine √† coudre Singer des ann√©es 80, parfait √©tat de fonctionnement. Id√©ale pour d√©buter.',
        category: '√âlectrom√©nager',
        condition: 'Tr√®s bon √©tat',
        tags: ['Singer', 'couture', 'vintage', 'machine', 'cr√©atif']
      },
      {
        title: 'Coffret complet de peinture acrylique',
        description: 'Coffret professionnel avec 48 tubes de peinture acrylique, pinceaux et accessoires.',
        category: 'Jouets & Jeux',
        condition: 'Neuf',
        tags: ['peinture', 'acrylique', 'professionnel', '48couleurs', 'complet']
      }
    ]
  }
];

/**
 * üîÑ CR√âATION DES √âCHANGES DANS TOUS LES √âTATS
 */
async function createComprehensiveTrades(users, objects, superAdmin) {
  console.log('üîÑ Cr√©ation des √©changes complets...');
  
  // Helper pour trouver un objet par titre partiel
  const findObjectByTitle = (titleSubstring) => {
    const found = objects.find(obj => obj.title.toLowerCase().includes(titleSubstring.toLowerCase()));
    if (!found) {
      console.log(`‚ö†Ô∏è Objet non trouv√© pour: ${titleSubstring}`);
    }
    return found;
  };

  // Helper pour trouver un utilisateur par pseudo
  const findUserByPseudo = (pseudoSubstring) => {
    const found = users.find(user => user.pseudo.toLowerCase().includes(pseudoSubstring.toLowerCase()));
    return found;
  };

  const trades = [
    // 1. √âchange en attente (PENDING) - Super Admin propose son guide
    {
      fromUser: superAdmin._id,
      toUser: findUserByPseudo('Marie')._id,
      requestedObjects: [findObjectByTitle('Robe vintage')._id],
      offeredObjects: [findObjectByTitle('Guide')._id],
      status: 'pending',
      message: 'Salut Marie ! Je propose mon guide premium contre ta magnifique robe vintage ?',
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // Il y a 5 jours
    },

    // 2. √âchange propos√© (PROPOSED) - Alexandre accepte et propose ses objets
    {
      fromUser: findUserByPseudo('Alex')._id,
      toUser: findUserByPseudo('Sophie')._id,
      requestedObjects: [findObjectByTitle('elliptique')._id],
      offeredObjects: [findObjectByTitle('iPhone')._id],
      status: 'proposed',
      message: 'Ton v√©lo elliptique m\'int√©resse ! Je propose mon iPhone 13 Pro en √©change.',
      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
      proposedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // Propos√© il y a 1 jour
    },

    // 3. √âchange accept√© (ACCEPTED) - Pr√™t pour livraison
    {
      fromUser: findUserByPseudo('Clara')._id,
      toUser: findUserByPseudo('Julien')._id,
      requestedObjects: [findObjectByTitle('√âtabli')._id],
      offeredObjects: [findObjectByTitle('Harry Potter')._id],
      status: 'accepted',
      message: 'Mon fils commence √† bricoler, ton √©tabli serait parfait ! Je propose ma collection Harry Potter.',
      createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
      acceptedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Accept√© il y a 2 jours
      security: {
        riskLevel: 'LOW_RISK',
        requiresEscrow: false,
        pureTradeValidation: {
          steps: {
            photosSubmitted: {
              fromUser: true,
              toUser: true
            }
          }
        }
      }
    },

    // 4. √âchange s√©curis√© avec d√©p√¥t (SECURED) - Haut risque
    {
      fromUser: findUserByPseudo('Markus')._id,
      toUser: findUserByPseudo('Alex')._id,
      requestedObjects: [findObjectByTitle('MacBook')._id],
      offeredObjects: [findObjectByTitle('Leica')._id],
      status: 'secured',
      message: '√âchange haute valeur : mon Leica M6 contre ton MacBook M2.',
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
      acceptedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
      securedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
      escrow: {
        amount: 500, // D√©p√¥t de 500‚Ç¨
        status: 'held',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        expiresAt: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000) // Expire dans 10 jours
      },
      security: {
        riskLevel: 'HIGH_RISK',
        requiresEscrow: true,
        requiresIdentityVerification: true,
        secureDeliveryRequired: true
      }
    },

    // 5. √âchange exp√©di√© (SHIPPED) - En transit
    {
      fromUser: findUserByPseudo('Emma')._id,
      toUser: findUserByPseudo('Marie')._id,
      requestedObjects: [findObjectByTitle('Sac √† main')._id],
      offeredObjects: [findObjectByTitle('Machine √† coudre')._id],
      status: 'shipped',
      message: 'Ma machine √† coudre vintage contre ton sac en cuir ?',
      createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
      acceptedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
      shippedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
      deliveryTracking: {
        fromUserTracking: 'FR123456789',
        toUserTracking: 'FR987654321',
        estimatedDelivery: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000)
      },
      security: {
        riskLevel: 'MEDIUM_RISK',
        pureTradeValidation: {
          steps: {
            photosSubmitted: {
              fromUser: true,
              toUser: true
            },
            shippingConfirmed: {
              fromUser: true,
              toUser: true
            }
          }
        }
      }
    },

    // 6. √âchange termin√© avec succ√®s (COMPLETED) - Avec √©valuations
    {
      fromUser: findUserByPseudo('Sophie')._id,
      toUser: findUserByPseudo('Julien')._id,
      requestedObjects: [findObjectByTitle('Perceuse')._id],
      offeredObjects: [findObjectByTitle('halt√®res')._id],
      status: 'completed',
      message: 'Ta perceuse contre mes halt√®res ajustables ?',
      createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      acceptedAt: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000),
      shippedAt: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000),
      completedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),
      ratings: {
        fromUserRating: { 
          score: 5, 
          comment: 'Perceuse en parfait √©tat, exactement comme d√©crite ! Merci Julien.',
          author: findUserByPseudo('Sophie').pseudo,
          createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000)
        },
        toUserRating: { 
          score: 5, 
          comment: 'Halt√®res parfaites, Sophie tr√®s sympathique. Transaction au top !',
          author: findUserByPseudo('Julien').pseudo,
          createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000)
        }
      }
    },

    // 7. √âchange en litige (DISPUTED)
    {
      fromUser: findUserByPseudo('Alex')._id,
      toUser: findUserByPseudo('Markus')._id,
      requestedObjects: [findObjectByTitle('Omega')._id],
      offeredObjects: [findObjectByTitle('Casque Sony')._id],
      status: 'disputed',
      message: 'Mon casque Sony premium contre ta montre Omega ?',
      createdAt: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000),
      acceptedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),
      disputedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
      dispute: {
        reason: 'L\'objet re√ßu ne correspond pas √† la description',
        reportedBy: findUserByPseudo('Alex')._id,
        reportedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        description: 'La montre pr√©sente des rayures importantes non mentionn√©es dans la description.'
      },
      security: {
        riskLevel: 'VERY_HIGH_RISK'
      }
    },

    // 8. √âchange annul√© (CANCELLED)
    {
      fromUser: findUserByPseudo('Clara')._id,
      toUser: findUserByPseudo('Emma')._id,
      requestedObjects: [findObjectByTitle('Coffret')._id],
      offeredObjects: [findObjectByTitle('Encyclop√©die')._id],
      status: 'cancelled',
      message: 'Mon encyclop√©die contre ton coffret de peinture ?',
      createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),
      cancelledAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
      cancellationReason: 'L\'utilisateur a chang√© d\'avis'
    },

    // 9. √âchange refus√© (REFUSED)
    {
      fromUser: findUserByPseudo('Marie')._id,
      toUser: superAdmin._id,
      requestedObjects: [findObjectByTitle('Kit de d√©marrage')._id],
      offeredObjects: [findObjectByTitle('Collier')._id],
      status: 'refused',
      message: 'Mon collier en perles contre votre kit √©cologique ?',
      createdAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),
      refusedAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),
      refusalReason: 'Objet ne correspond pas aux besoins actuels'
    }
  ];

  const createdTrades = [];
  for (const tradeData of trades) {
    // V√©rifier que tous les objets et utilisateurs existent
    const hasValidObjects = tradeData.requestedObjects?.every(id => id) && tradeData.offeredObjects?.every(id => id);
    const hasValidUsers = tradeData.fromUser && tradeData.toUser;
    
    if (!hasValidObjects || !hasValidUsers) {
      console.log('‚ö†Ô∏è √âchange ignor√© car donn√©es manquantes:', tradeData.message);
      continue;
    }

    const trade = new Trade(tradeData);
    await trade.save();
    createdTrades.push(trade);
    console.log(`‚úÖ √âchange cr√©√©: ${tradeData.status} - ${tradeData.message.substring(0, 50)}...`);
  }

  return createdTrades;
}

/**
 * üö® CR√âATION DES SIGNALEMENTS
 */
async function createComprehensiveReports(users, objects, trades) {
  console.log('üö® Cr√©ation des signalements...');
  
  const findObjectByTitle = (titleSubstring) => {
    return objects.find(obj => obj.title.toLowerCase().includes(titleSubstring.toLowerCase()));
  };

  const findUserByPseudo = (pseudoSubstring) => {
    return users.find(user => user.pseudo.toLowerCase().includes(pseudoSubstring.toLowerCase()));
  };

  const reports = [
    {
      reporter: findUserByPseudo('Alex')._id,
      reportedUser: findUserByPseudo('Markus')._id,
      reportedObject: findObjectByTitle('Omega')._id,
      relatedTrade: trades.find(t => t.status === 'disputed')._id,
      type: 'misleading_description',
      reason: 'Description non conforme',
      description: 'La montre pr√©sente des rayures importantes et des dysfonctionnements non mentionn√©s dans la description.',
      status: 'pending',
      priority: 'high',
      evidence: [
        { 
          type: 'image', 
          url: 'https://picsum.photos/400/300?random=100', 
          description: 'Photo des rayures sur le bo√Ætier' 
        },
        { 
          type: 'image', 
          url: 'https://picsum.photos/400/300?random=101', 
          description: 'Photo du m√©canisme d√©faillant' 
        }
      ],
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
    },
    {
      reporter: findUserByPseudo('Clara')._id,
      reportedUser: findUserByPseudo('Markus')._id,
      type: 'suspicious_behavior',
      reason: 'Tentative d\'arnaque',
      description: 'L\'utilisateur demande un paiement en plus de l\'√©change, ce qui va contre les r√®gles de la plateforme.',
      status: 'under_review',
      priority: 'high',
      evidence: [
        { 
          type: 'screenshot', 
          url: 'https://picsum.photos/400/300?random=102', 
          description: 'Capture d\'√©cran de la demande de paiement' 
        }
      ],
      createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),
      reviewedBy: findUserByPseudo('Clara')._id,
      reviewedAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000)
    },
    {
      reporter: findUserByPseudo('Sophie')._id,
      reportedUser: findUserByPseudo('Emma')._id,
      reportedObject: findObjectByTitle('peinture')._id,
      type: 'inappropriate_content',
      reason: 'Contenu inappropri√©',
      description: 'Les photos de l\'objet contiennent des √©l√©ments non appropri√©s en arri√®re-plan.',
      status: 'resolved',
      priority: 'medium',
      resolution: {
        action: 'content_moderated',
        description: 'Photos remplac√©es par l\'utilisateur',
        resolvedBy: findUserByPseudo('Clara')._id,
        resolvedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
      },
      createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
    }
  ];

  const createdReports = [];
  for (const reportData of reports) {
    try {
      const report = new Report(reportData);
      await report.save();
      createdReports.push(report);
      console.log(`‚úÖ Signalement cr√©√©: ${reportData.type} - ${reportData.reason}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur lors de la cr√©ation du signalement: ${error.message}`);
    }
  }

  return createdReports;
}

/**
 * üìä MISE √Ä JOUR DES STATISTIQUES UTILISATEURS
 */
async function updateUserStats(users, trades) {
  console.log('üìä Mise √† jour des statistiques utilisateurs...');
  
  for (const user of users) {
    const userTrades = trades.filter(t => 
      t.fromUser.toString() === user._id.toString() || 
      t.toUser.toString() === user._id.toString()
    );
    
    const completedTrades = userTrades.filter(t => t.status === 'completed');
    const avgRating = calculateAverageRating(user._id, trades);
    const totalRatings = countTotalRatings(user._id, trades);
    
    await User.findByIdAndUpdate(user._id, {
      'tradeStats.totalTrades': userTrades.length,
      'tradeStats.completedTrades': completedTrades.length,
      'tradeStats.successRate': userTrades.length > 0 ? Math.round((completedTrades.length / userTrades.length) * 100) : 0,
      'tradeStats.avgRating': avgRating,
      'tradeStats.totalRatings': totalRatings
    });
    
    console.log(`‚úÖ Stats mises √† jour pour ${user.pseudo}: ${userTrades.length} √©changes, ${completedTrades.length} termin√©s`);
  }
}

// Helper functions
function calculateAverageRating(userId, trades) {
  const ratings = [];
  trades.forEach(trade => {
    if (trade.status === 'completed' && trade.ratings) {
      if (trade.fromUser.toString() === userId.toString() && trade.ratings.toUserRating) {
        ratings.push(trade.ratings.toUserRating.score);
      }
      if (trade.toUser.toString() === userId.toString() && trade.ratings.fromUserRating) {
        ratings.push(trade.ratings.fromUserRating.score);
      }
    }
  });
  
  return ratings.length > 0 ? Math.round((ratings.reduce((a, b) => a + b, 0) / ratings.length) * 10) / 10 : 0;
}

function calculateTotalRatings(userId, trades) {
  let count = 0;
  trades.forEach(trade => {
    if (trade.status === 'completed' && trade.ratings) {
      if (trade.fromUser.toString() === userId.toString() && trade.ratings.toUserRating) {
        count++;
      }
      if (trade.toUser.toString() === userId.toString() && trade.ratings.fromUserRating) {
        count++;
      }
    }
  });
  return count;
}

/**
 * üöÄ SCRIPT PRINCIPAL
 */
async function createComprehensiveTestData() {
  try {
    console.log('üöÄ D√©marrage de la cr√©ation compl√®te de donn√©es de test...');
    console.log('üéØ Base de donn√©es:', MONGODB_URI);
    
    // Connexion √† la base de donn√©es
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');

    // V√©rifier les cat√©gories
    const categories = await Category.find();
    if (categories.length === 0) {
      console.log('‚ö†Ô∏è Aucune cat√©gorie trouv√©e. Cr√©ation des cat√©gories de base...');
      // Cr√©er quelques cat√©gories de base si elles n'existent pas
      const basicCategories = [
        'Livres & BD', '√âlectronique', 'V√™tements & Mode', 'Sports & Loisirs', 
        'Bricolage & Outillage', 'Art & Objets de Collection', 'Loisirs Cr√©atifs',
        'Mat√©riel Informatique', 'Audio & Hi-Fi', 'Bijoux & Accessoires',
        'Bagagerie & Maroquinerie', '√âcologie & Environnement'
      ];
      
      for (const catName of basicCategories) {
        const category = new Category({ name: catName, slug: catName.toLowerCase().replace(/ & /g, '-').replace(/ /g, '-') });
        await category.save();
      }
      console.log('‚úÖ Cat√©gories de base cr√©√©es');
    }

    // 1. Cr√©er le super admin
    const superAdmin = await createSuperAdmin();
    
    // 2. Cr√©er les utilisateurs de test
    console.log('üë• Cr√©ation des utilisateurs de test...');
    const allUsers = [superAdmin]; // Commencer avec le super admin
    
    for (const userData of testUsersData) {
      // V√©rifier si l'utilisateur existe d√©j√†
      const existingUser = await User.findOne({ email: userData.email });
      if (existingUser) {
        console.log(`‚ö†Ô∏è Utilisateur ${userData.pseudo} existe d√©j√†`);
        allUsers.push(existingUser);
        continue;
      }

      // Hacher le mot de passe
      const hashedPassword = await bcrypt.hash(userData.password, 12);
      
      // Cr√©er l'utilisateur
      const user = new User({
        ...userData,
        password: hashedPassword,
        avatar: `https://picsum.photos/150/150?random=${allUsers.length}`,
        createdAt: new Date(Date.now() - Math.random() * 180 * 24 * 60 * 60 * 1000), // 0-180 jours
        lastLoginAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // 0-30 jours
        tradeStats: {
          totalTrades: 0,
          completedTrades: 0,
          successRate: 0,
          avgRating: 0,
          totalRatings: 0
        }
      });

      await user.save();
      allUsers.push(user);
      console.log(`‚úÖ Utilisateur cr√©√©: ${userData.pseudo} (${userData.email})`);
    }

    // 3. Cr√©er les objets
    console.log('üì¶ Cr√©ation des objets...');
    const allObjects = [];
    const categoriesMap = {};
    categories.forEach(cat => {
      categoriesMap[cat.name] = cat._id;
    });
    
    for (let i = 0; i < objectsData.length; i++) {
      const userObjects = objectsData[i];
      const user = allUsers[userObjects.userIndex];
      
      if (!user) {
        console.log(`‚ö†Ô∏è Utilisateur non trouv√© √† l'index ${userObjects.userIndex}`);
        continue;
      }
      
      for (const objectData of userObjects.objects) {
        // Trouver la cat√©gorie
        let categoryId = null;
        for (const [catName, catId] of Object.entries(categoriesMap)) {
          if (catName.toLowerCase().includes(objectData.category.toLowerCase()) ||
              objectData.category.toLowerCase().includes(catName.toLowerCase())) {
            categoryId = catId;
            break;
          }
        }

        if (!categoryId) {
          console.log(`‚ö†Ô∏è Cat√©gorie non trouv√©e pour: ${objectData.category}`);
          continue;
        }

        const object = new ObjectModel({
          ...objectData,
          owner: user._id,
          category: categoryId,
          status: 'available',
          location: {
            coordinates: user.address.coordinates,
            address: {
              street: user.address.street,
              city: user.address.city,
              zipCode: user.address.zipCode,
              country: user.address.country
            },
            precision: user.address.precision,
            isPublic: true,
            searchRadius: 15
          },
          imageUrl: `https://picsum.photos/400/300?random=${allObjects.length + 1}`,
          images: [{ 
            url: `https://picsum.photos/400/300?random=${allObjects.length + 1}`, 
            caption: objectData.title,
            isPrimary: true 
          }],
          createdAt: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000), // 0-90 jours
          viewsCount: Math.floor(Math.random() * 200) + 10,
          favoritesCount: Math.floor(Math.random() * 50)
        });

        await object.save();
        allObjects.push(object);
        console.log(`‚úÖ Objet cr√©√©: ${objectData.title} pour ${user.pseudo}`);
      }
    }

    // 4. Cr√©er les √©changes
    const trades = await createComprehensiveTrades(allUsers, allObjects, superAdmin);
    
    // 5. Cr√©er les signalements
    await createComprehensiveReports(allUsers, allObjects, trades);

    // 6. Mettre √† jour les statistiques
    await updateUserStats(allUsers, trades);

    // 7. R√©sum√© final
    console.log('\nüéâ DONN√âES DE TEST COMPL√àTES CR√â√âES AVEC SUCC√àS !');
    console.log('=' .repeat(60));
    console.log('üìä R√âSUM√â:');
    console.log(`   üëë Super Admin: 1 (${superAdmin.email})`);
    console.log(`   üë• Utilisateurs: ${allUsers.length} (dont ${allUsers.filter(u => u.isAdmin).length} admin)`);
    console.log(`   üì¶ Objets: ${allObjects.length}`);
    console.log(`   üîÑ √âchanges: ${trades.length}`);
    console.log(`   üö® Signalements: 3`);
    console.log(`   üè∑Ô∏è Cat√©gories: ${categories.length}`);
    
    console.log('\nüîë COMPTES PRINCIPAUX:');
    console.log(`   ü¶∏‚Äç‚ôÇÔ∏è Super Admin: ${superAdmin.email} | SuperAdmin2024!`);
    console.log('   üõ°Ô∏è Mod√©ratrice: clara.books@cadok.app | Books2024!');
    console.log('   üë§ Utilisateurs test: marie.test@cadok.app | Marie2024!');
    console.log('                        alex.tech@cadok.app | Tech2024!');
    
    console.log('\nüìã √âTATS DES √âCHANGES CR√â√âS:');
    const statusCounts = {};
    trades.forEach(trade => {
      statusCounts[trade.status] = (statusCounts[trade.status] || 0) + 1;
    });
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`   ${status.toUpperCase()}: ${count}`);
    });

    console.log('\n‚úÖ PR√äT POUR LES TESTS ! üöÄ');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es:', error);
    console.error(error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion ferm√©e');
  }
}

// Correction pour countTotalRatings
function countTotalRatings(userId, trades) {
  return calculateTotalRatings(userId, trades);  // Utiliser la fonction existante
}

// Ex√©cuter le script
if (require.main === module) {
  createComprehensiveTestData();
}

module.exports = { createComprehensiveTestData };
