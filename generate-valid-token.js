/**
 * üîë G√âN√âRATION NOUVEAU TOKEN ADMIN VALIDE
 */

const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

const generateValidAdminToken = async () => {
  try {
    console.log('üîå Connexion √† MongoDB...');
    await mongoose.connect('mongodb://localhost:27017/cadok');
    
    // 1. R√©cup√©rer l'utilisateur admin
    const adminUser = await User.findOne({ email: 'ndongoambassa7@gmail.com' });
    
    if (!adminUser) {
      console.log('‚ùå Utilisateur admin non trouv√©');
      return;
    }
    
    console.log('‚úÖ Utilisateur admin trouv√©:', adminUser.email);
    console.log('   Role:', adminUser.role);
    console.log('   isAdmin:', adminUser.isAdmin);
    
    // 2. G√©n√©rer un nouveau token avec la bonne cl√© secr√®te
    const JWT_SECRET = process.env.JWT_SECRET;
    console.log('\nüîë JWT_SECRET utilis√©:', JWT_SECRET ? 'Pr√©sent' : 'Manquant');
    
    if (!JWT_SECRET) {
      console.log('‚ùå JWT_SECRET manquant dans .env');
      return;
    }
    
    const token = jwt.sign(
      { id: adminUser._id },
      JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('\n‚úÖ NOUVEAU TOKEN G√âN√âR√â:');
    console.log('========================');
    console.log('Token:', token);
    
    // 3. Test du token g√©n√©r√©
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      console.log('\n‚úÖ Token valid√© avec succ√®s');
      console.log('User ID:', decoded.id);
      console.log('Expire:', new Date(decoded.exp * 1000));
      
    } catch (verifyError) {
      console.log('‚ùå Erreur validation token:', verifyError.message);
    }
    
    // 4. Test API avec ce token
    const axios = require('axios');
    console.log('\nüß™ Test API avec nouveau token...');
    
    try {
      const response = await axios.get('http://localhost:5000/api/admin/events', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ Test API r√©ussi:', response.data.success ? 'SUCCESS' : 'FAILED');
      
    } catch (apiError) {
      console.log('‚ùå Test API √©chou√©:', apiError.response?.status, apiError.response?.data?.error);
    }
    
    console.log('\nüìã INSTRUCTIONS:');
    console.log('================');
    console.log('1. Copiez ce token:');
    console.log(`   ${token}`);
    console.log('2. Dans la console de votre navigateur, tapez:');
    console.log(`   localStorage.setItem('token', '${token}');`);
    console.log('3. Rechargez la page et essayez de cr√©er un √©v√©nement');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    mongoose.connection.close();
  }
};

// Charger les variables d'environnement
require('dotenv').config();
generateValidAdminToken();
